
Timer_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800411c  0800411c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  08004130  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004130  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012380  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a4  00000000  00000000  000323ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3e  00000000  00000000  00035958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fef  00000000  00000000  00036596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a92  00000000  00000000  00057585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9e57  00000000  00000000  0006a017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000415c  00000000  00000000  00133e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00137fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003fa8 	.word	0x08003fa8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003fa8 	.word	0x08003fa8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <printDebug>:
#include "main.h"
#include "string.h"


// Print a message using the UART Interface
void printDebug(UART_HandleTypeDef * huart, char * text){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
       HAL_UART_Transmit(huart, (uint8_t *) text, strlen(text),100);
 80004e2:	6838      	ldr	r0, [r7, #0]
 80004e4:	f7ff fe72 	bl	80001cc <strlen>
 80004e8:	4603      	mov	r3, r0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f002 fff9 	bl	80034e8 <HAL_UART_Transmit>
	        HAL_UART_AbortTransmit(huart);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f003 f880 	bl	80035fc <HAL_UART_AbortTransmit>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fd03 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f830 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f97e 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f94c 	bl	80007b0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000518:	f000 f8da 	bl	80006d0 <MX_TIM6_Init>
  MX_TIM2_Init();
 800051c:	f000 f88a 	bl	8000634 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000520:	f000 f90e 	bl	8000740 <MX_TIM7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Just a friendly neighborhood debug helper statement
  printDebug(&huart2 ,"   New Program Start  \n\n \r");
 8000524:	490d      	ldr	r1, [pc, #52]	; (800055c <main+0x58>)
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <main+0x5c>)
 8000528:	f7ff ffd6 	bl	80004d8 <printDebug>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	//  _tim_timeout_blocking(4000);
	  //for Test with button detection
	  //Default running
	  if(buttonPressed == 0){
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <main+0x60>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d104      	bne.n	800053e <main+0x3a>
		  _tim_timeout_blocking(DELAYTIME_BLOCKING);
 8000534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000538:	f000 fb8e 	bl	8000c58 <_tim_timeout_blocking>
 800053c:	e008      	b.n	8000550 <main+0x4c>
	  }else{
		  _tim_timeout_nonblocking_with_callback(DELAYTIME_NONBLOCKING, customCallbackFunction );
 800053e:	490a      	ldr	r1, [pc, #40]	; (8000568 <main+0x64>)
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fbb4 	bl	8000cb0 <_tim_timeout_nonblocking_with_callback>
		  helperBlink(20, 150);
 8000548:	2196      	movs	r1, #150	; 0x96
 800054a:	2014      	movs	r0, #20
 800054c:	f000 fc3f 	bl	8000dce <helperBlink>


	  }
	 // HAL_Delay(3000);
	  printDebug(&huart2 ,"  In Main Loop \n\n \r");
 8000550:	4906      	ldr	r1, [pc, #24]	; (800056c <main+0x68>)
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <main+0x5c>)
 8000554:	f7ff ffc0 	bl	80004d8 <printDebug>
	  if(buttonPressed == 0){
 8000558:	e7e8      	b.n	800052c <main+0x28>
 800055a:	bf00      	nop
 800055c:	08003fc0 	.word	0x08003fc0
 8000560:	20000260 	.word	0x20000260
 8000564:	20000028 	.word	0x20000028
 8000568:	08000d29 	.word	0x08000d29
 800056c:	08003fdc 	.word	0x08003fdc

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fce5 	bl	8003f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f001 f8bb 	bl	8001710 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fa0c 	bl	80009bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a4:	f001 f896 	bl	80016d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xc0>)
 80005aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xc0>)
 80005b0:	f023 0318 	bic.w	r3, r3, #24
 80005b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b8:	2314      	movs	r3, #20
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f8e5 	bl	80017bc <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f9e0 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fce5 	bl	8001fe4 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000620:	f000 f9cc 	bl	80009bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000624:	f002 f8f8 	bl	8002818 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_TIM2_Init+0x98>)
 8000654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_TIM2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM2_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_TIM2_Init+0x98>)
 8000668:	f04f 32ff 	mov.w	r2, #4294967295
 800066c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_TIM2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_TIM2_Init+0x98>)
 800067c:	f002 f9ce 	bl	8002a1c <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000686:	f000 f999 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_TIM2_Init+0x98>)
 8000698:	f002 fbcb 	bl	8002e32 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006a2:	f000 f98b 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_TIM2_Init+0x98>)
 80006b4:	f002 fe3c 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006be:	f000 f97d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000002c 	.word	0x2000002c

080006d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_TIM6_Init+0x68>)
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <MX_TIM6_Init+0x6c>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_TIM6_Init+0x68>)
 80006e8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80006ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_TIM6_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64535;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_TIM6_Init+0x68>)
 80006f6:	f64f 4217 	movw	r2, #64535	; 0xfc17
 80006fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_TIM6_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_TIM6_Init+0x68>)
 8000704:	f002 f98a 	bl	8002a1c <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800070e:	f000 f955 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_TIM6_Init+0x68>)
 8000720:	f002 fe06 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800072a:	f000 f947 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000e8 	.word	0x200000e8
 800073c:	40001000 	.word	0x40001000

08000740 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_TIM7_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000-1;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000758:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800075c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM7_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000774:	f002 f952 	bl	8002a1c <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800077e:	f000 f91d 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000790:	f002 fdce 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 f90f 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001a4 	.word	0x200001a4
 80007ac:	40001400 	.word	0x40001400

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	f002 fe2a 	bl	800344c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8dd 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000260 	.word	0x20000260
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fee2 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_STATUS_GPIO_Port, BOARD_STATUS_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2108      	movs	r1, #8
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_GPIO_Init+0xec>)
 8000882:	f000 fedd 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fd4d 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin|LED_GREEN_Pin;
 80008a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fd3d 	bl	800133c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_STATUS_Pin */
  GPIO_InitStruct.Pin = BOARD_STATUS_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_STATUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0xec>)
 80008da:	f000 fd2f 	bl	800133c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2009      	movs	r0, #9
 80008e4:	f000 fca9 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008e8:	2009      	movs	r0, #9
 80008ea:	f000 fcc2 	bl	8001272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_GPIO_EXTI_Callback>:
// My Overwriiten Interrupts



	//Button Interrupt -- with crude debouncing
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
}
 800090c:	bf00      	nop
	__disable_irq();
	HAL_SuspendTick();
 800090e:	f000 fb99 	bl	8001044 <HAL_SuspendTick>
//


	// Extra logic for correct button determination and pressed again override

	bool pinCorrect = (GPIO_Pin == BUTTON_Pin);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	2b08      	cmp	r3, #8
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
	bool firstState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 800091e:	2108      	movs	r1, #8
 8000920:	4823      	ldr	r0, [pc, #140]	; (80009b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000922:	f000 fe75 	bl	8001610 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]
	bool debounceSucessfull = false;
 8000932:	2300      	movs	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

	// Extra logic for Debouncing (very crude, i know but not part of the assignment
	for (int i = 0; i < 1000000; ++i) {
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	e002      	b.n	8000942 <HAL_GPIO_EXTI_Callback+0x42>
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	ddf8      	ble.n	800093c <HAL_GPIO_EXTI_Callback+0x3c>
				;
			}
	bool secondState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 800094a:	2108      	movs	r1, #8
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800094e:	f000 fe5f 	bl	8001610 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	737b      	strb	r3, [r7, #13]
	if( secondState == firstState){
 800095e:	7b7a      	ldrb	r2, [r7, #13]
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	429a      	cmp	r2, r3
 8000964:	d101      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0x6a>
		debounceSucessfull = true;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
	}

	if(pinCorrect && (firstState == false) && (debounceSucessfull) ){
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d017      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0xa0>
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d011      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0xa0>
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00e      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0xa0>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		//_tim_timeout_blocking(2000);
		//printDebug(&huart2 ,"  button action  \n\n \r");
		if(buttonPressed == 0){
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d105      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x96>
			buttonPressed = 1;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
			helperSetAllLedLow();
 8000990:	f000 fa06 	bl	8000da0 <helperSetAllLedLow>
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_EXTI_Callback+0xa0>
		}else{
			buttonPressed = 0;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
			helperSetAllLedLow();
 800099c:	f000 fa00 	bl	8000da0 <helperSetAllLedLow>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a0:	b662      	cpsie	i
}
 80009a2:	bf00      	nop
		}
	}


	__enable_irq();
	HAL_ResumeTick();
 80009a4:	f000 fb5e 	bl	8001064 <HAL_ResumeTick>
}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000400 	.word	0x48000400
 80009b4:	000f423f 	.word	0x000f423f
 80009b8:	20000028 	.word	0x20000028

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();
  printDebug(&huart2 ,"  You done Upsi and stuck in Error handeler  \n\n \r");
 80009c4:	4905      	ldr	r1, [pc, #20]	; (80009dc <Error_Handler+0x20>)
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <Error_Handler+0x24>)
 80009c8:	f7ff fd86 	bl	80004d8 <printDebug>
  // Toggle Red LED:
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 fe34 	bl	8001640 <HAL_GPIO_WritePin>

  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x1c>
 80009da:	bf00      	nop
 80009dc:	08003ff0 	.word	0x08003ff0
 80009e0:	20000260 	.word	0x20000260

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a3c:	d10c      	bne.n	8000a58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000a56:	e032      	b.n	8000abe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_TIM_Base_MspInit+0xa0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d114      	bne.n	8000a8c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 0310 	and.w	r3, r3, #16
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2036      	movs	r0, #54	; 0x36
 8000a80:	f000 fbdb 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	; 0x36
 8000a86:	f000 fbf4 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000a8a:	e018      	b.n	8000abe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_TIM_Base_MspInit+0xa4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d113      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2037      	movs	r0, #55	; 0x37
 8000ab4:	f000 fbc1 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ab8:	2037      	movs	r0, #55	; 0x37
 8000aba:	f000 fbda 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40001000 	.word	0x40001000
 8000ad0:	40001400 	.word	0x40001400

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09e      	sub	sp, #120	; 0x78
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2254      	movs	r2, #84	; 0x54
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fa2a 	bl	8003f4e <memset>
  if(huart->Instance==USART2)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <HAL_UART_MspInit+0xcc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d148      	bne.n	8000b96 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fc8b 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff ff4e 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0xd0>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b50:	2304      	movs	r3, #4
 8000b52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b60:	2307      	movs	r3, #7
 8000b62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f000 fbe5 	bl	800133c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b84:	2303      	movs	r3, #3
 8000b86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f000 fbd3 	bl	800133c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3778      	adds	r7, #120	; 0x78
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f9e2 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c00:	2008      	movs	r0, #8
 8000c02:	f000 fd4f 	bl	80016a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f001 ffea 	bl	8002bea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000e8 	.word	0x200000e8

08000c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM7_IRQHandler+0x10>)
 8000c26:	f001 ffe0 	bl	8002bea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001a4 	.word	0x200001a4

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <_tim_timeout_blocking>:
// UART handle
extern UART_HandleTypeDef huart2;

//Timer INIT is done in main.c

void _tim_timeout_blocking(uint32_t time){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

	 printDebug(&huart2 ,"  Entered blocking function \n\n \r");
 8000c60:	490f      	ldr	r1, [pc, #60]	; (8000ca0 <_tim_timeout_blocking+0x48>)
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <_tim_timeout_blocking+0x4c>)
 8000c64:	f7ff fc38 	bl	80004d8 <printDebug>
	 //Activate The Timer
	 HAL_TIM_Base_Init(&htim6);
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <_tim_timeout_blocking+0x50>)
 8000c6a:	f001 fed7 	bl	8002a1c <HAL_TIM_Base_Init>
	 TIM6->ARR = time;
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <_tim_timeout_blocking+0x54>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&htim6);
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <_tim_timeout_blocking+0x50>)
 8000c76:	f001 ff35 	bl	8002ae4 <HAL_TIM_Base_Start_IT>

	  // Old school way, worked but trying correct sleep mode

	  //Put the System in Idle while the Timer Runs
	  int timerStatus = 1; // 0 == TimerIsCounting, 1 == Timer has counted up to it's Value
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000c7e:	e007      	b.n	8000c90 <_tim_timeout_blocking+0x38>
		  timerStatus = (TIM6->SR != 0x1); //Checking for the status of the SR Register
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <_tim_timeout_blocking+0x54>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f4      	bne.n	8000c80 <_tim_timeout_blocking+0x28>
	  // According to Documentation Systicks have to be disabled ... so lets do this
	  HAL_SuspendTick();
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  HAL_ResumeTick();
*/
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08004024 	.word	0x08004024
 8000ca4:	20000260 	.word	0x20000260
 8000ca8:	200000e8 	.word	0x200000e8
 8000cac:	40001000 	.word	0x40001000

08000cb0 <_tim_timeout_nonblocking_with_callback>:


void _tim_timeout_nonblocking_with_callback(uint16_t time,void (*callbacFunction)(void) ){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	80fb      	strh	r3, [r7, #6]
		//  printDebug(&huart2 ,"  Timer is Waiting  \n\n \r");
		//  HAL_Delay(1000);
	  }
	callbacFunction();
*/
				HAL_TIM_Base_Stop_IT(&htim6);
 8000cbc:	4815      	ldr	r0, [pc, #84]	; (8000d14 <_tim_timeout_nonblocking_with_callback+0x64>)
 8000cbe:	f001 ff65 	bl	8002b8c <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fcb9 	bl	8001640 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fcb3 	bl	8001640 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce4:	f000 fcac 	bl	8001640 <HAL_GPIO_WritePin>

		 printDebug(&huart2 ,"  Entered NON blocking function \n\n \r");
 8000ce8:	490b      	ldr	r1, [pc, #44]	; (8000d18 <_tim_timeout_nonblocking_with_callback+0x68>)
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <_tim_timeout_nonblocking_with_callback+0x6c>)
 8000cec:	f7ff fbf4 	bl	80004d8 <printDebug>
	 //Activate The Timer
	 HAL_TIM_Base_Init(&htim7);
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <_tim_timeout_nonblocking_with_callback+0x70>)
 8000cf2:	f001 fe93 	bl	8002a1c <HAL_TIM_Base_Init>
	 TIM7->ARR = time;
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <_tim_timeout_nonblocking_with_callback+0x74>)
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&htim7);
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <_tim_timeout_nonblocking_with_callback+0x70>)
 8000cfe:	f001 fef1 	bl	8002ae4 <HAL_TIM_Base_Start_IT>


// safe the callback function to use it later in the interrupt
safeCallbackFunciton(SAFECALLBACKFUCNTIONMODE_WRITE, callbacFunction);
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 f831 	bl	8000d6c <safeCallbackFunciton>


}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000e8 	.word	0x200000e8
 8000d18:	08004048 	.word	0x08004048
 8000d1c:	20000260 	.word	0x20000260
 8000d20:	200001a4 	.word	0x200001a4
 8000d24:	40001400 	.word	0x40001400

08000d28 <customCallbackFunction>:




void customCallbackFunction(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
	printDebug(&huart2 ,"  enteredCallbackFucntion \n\n \r");
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <customCallbackFunction+0x38>)
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <customCallbackFunction+0x3c>)
 8000d32:	f7ff fbd1 	bl	80004d8 <printDebug>
	HAL_GPIO_TogglePin(GPIOA, LED_BLUE_Pin);
 8000d36:	2110      	movs	r1, #16
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f000 fc98 	bl	8001670 <HAL_GPIO_TogglePin>
	for(int i = 0; i < 10000000; i++){
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	e002      	b.n	8000d4c <customCallbackFunction+0x24>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <customCallbackFunction+0x40>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	dbf8      	blt.n	8000d46 <customCallbackFunction+0x1e>
		;
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08004070 	.word	0x08004070
 8000d64:	20000260 	.word	0x20000260
 8000d68:	00989680 	.word	0x00989680

08000d6c <safeCallbackFunciton>:



void * safeCallbackFunciton(int mode,Callbackfuntion fptr){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	static Callbackfuntion safedfptr = NULL;
	if(mode == SAFECALLBACKFUCNTIONMODE_WRITE){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d102      	bne.n	8000d82 <safeCallbackFunciton+0x16>
		safedfptr = fptr;
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <safeCallbackFunciton+0x30>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6013      	str	r3, [r2, #0]
	}
	if(mode == SAFECALLBACKFUCNTIONMODE_READ){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d102      	bne.n	8000d8e <safeCallbackFunciton+0x22>
		return safedfptr;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <safeCallbackFunciton+0x30>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	e000      	b.n	8000d90 <safeCallbackFunciton+0x24>
	}
return NULL;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	200002e8 	.word	0x200002e8

08000da0 <helperSetAllLedLow>:

void helperSetAllLedLow(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 fc48 	bl	8001640 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f000 fc42 	bl	8001640 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f000 fc3b 	bl	8001640 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <helperBlink>:

//Helper fucntion Blink LED
void helperBlink(int count, int frequency){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
	  for(int i = 0; i < count; i++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e023      	b.n	8000e26 <helperBlink+0x58>
		  HAL_Delay(frequency);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f90b 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2110      	movs	r1, #16
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 fc27 	bl	8001640 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f000 fc21 	bl	8001640 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fc1a 	bl	8001640 <HAL_GPIO_WritePin>
		  HAL_Delay(frequency);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f8f4 	bl	8000ffc <HAL_Delay>
		 helperSetAllLedLow();
 8000e14:	f7ff ffc4 	bl	8000da0 <helperSetAllLedLow>
		  HAL_Delay(frequency);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f8ee 	bl	8000ffc <HAL_Delay>
	  for(int i = 0; i < count; i++){
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbd7      	blt.n	8000dde <helperBlink+0x10>
		  }
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_TIM_PeriodElapsedCallback>:


// Interrupt Routine timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d111      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x34>
		// Print Debug Message
		 printDebug(&huart2 ,"  Entered Interrupt  \n\n \r");
 8000e48:	4919      	ldr	r1, [pc, #100]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e4a:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e4c:	f7ff fb44 	bl	80004d8 <printDebug>
		  // Toggle the Green LED Pin
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f000 fc0a 	bl	8001670 <HAL_GPIO_TogglePin>
		  //TIM6->ARR &= 0x0;
		  HAL_TIM_Base_Stop_IT(&htim6);
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e5e:	f001 fe95 	bl	8002b8c <HAL_TIM_Base_Stop_IT>
		  	  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
 8000e62:	4915      	ldr	r1, [pc, #84]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e66:	f7ff fb37 	bl	80004d8 <printDebug>
					  f();
					  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
			 }
		 }

}
 8000e6a:	e01b      	b.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x6c>
	} else if (htim == &htim7){
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d117      	bne.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		helperSetAllLedLow();
 8000e74:	f7ff ff94 	bl	8000da0 <helperSetAllLedLow>
		Callbackfuntion f = safeCallbackFunciton(SAFECALLBACKFUCNTIONMODE_READ, NULL);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff ff76 	bl	8000d6c <safeCallbackFunciton>
 8000e80:	4603      	mov	r3, r0
 8000e82:	60fb      	str	r3, [r7, #12]
			 if(f != NULL){
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00c      	beq.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x6c>
				 printDebug(&huart2 ,"  Entered Interrupt  \n\n \r");
 8000e8a:	4909      	ldr	r1, [pc, #36]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e8e:	f7ff fb23 	bl	80004d8 <printDebug>
				  HAL_TIM_Base_Stop_IT(&htim7);
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e94:	f001 fe7a 	bl	8002b8c <HAL_TIM_Base_Stop_IT>
					  f();
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4798      	blx	r3
					  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
 8000e9c:	4906      	ldr	r1, [pc, #24]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ea0:	f7ff fb1a 	bl	80004d8 <printDebug>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000e8 	.word	0x200000e8
 8000eb0:	08004090 	.word	0x08004090
 8000eb4:	20000260 	.word	0x20000260
 8000eb8:	080040ac 	.word	0x080040ac
 8000ebc:	200001a4 	.word	0x200001a4

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff feb6 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 f837 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff fb07 	bl	8000504 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	08004124 	.word	0x08004124
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	200002f0 	.word	0x200002f0

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f981 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff fd56 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d023      	beq.n	8000fa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_InitTick+0x70>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f98d 	bl	800128e <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d809      	bhi.n	8000f94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f957 	bl	800123a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0x74>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e007      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e004      	b.n	8000fa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e001      	b.n	8000fa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	200002ec 	.word	0x200002ec

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200002ec 	.word	0x200002ec

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_SuspendTick+0x1c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_SuspendTick+0x1c>)
 800104e:	f023 0302 	bic.w	r3, r3, #2
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_ResumeTick+0x1c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_ResumeTick+0x1c>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff3e 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff31 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d008      	beq.n	80012d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e022      	b.n	8001316 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020e 	bic.w	r2, r2, #14
 80012de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f003 021c 	and.w	r2, r3, #28
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e148      	b.n	80015de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 813a 	beq.w	80015d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d005      	beq.n	800137c <HAL_GPIO_Init+0x40>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d130      	bne.n	80013de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b2:	2201      	movs	r2, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 0201 	and.w	r2, r3, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d017      	beq.n	800141a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d123      	bne.n	800146e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	6939      	ldr	r1, [r7, #16]
 800146a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0203 	and.w	r2, r3, #3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8094 	beq.w	80015d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_GPIO_Init+0x2c0>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	4a51      	ldr	r2, [pc, #324]	; (80015fc <HAL_GPIO_Init+0x2c0>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6613      	str	r3, [r2, #96]	; 0x60
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_GPIO_Init+0x2c0>)
 80014be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c8:	4a4d      	ldr	r2, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014f2:	d00d      	beq.n	8001510 <HAL_GPIO_Init+0x1d4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a43      	ldr	r2, [pc, #268]	; (8001604 <HAL_GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1d0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a42      	ldr	r2, [pc, #264]	; (8001608 <HAL_GPIO_Init+0x2cc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_GPIO_Init+0x1cc>
 8001504:	2302      	movs	r3, #2
 8001506:	e004      	b.n	8001512 <HAL_GPIO_Init+0x1d6>
 8001508:	2307      	movs	r3, #7
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x1d6>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_GPIO_Init+0x1d6>
 8001510:	2300      	movs	r3, #0
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001522:	4937      	ldr	r1, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x2c4>)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_GPIO_Init+0x2d0>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001554:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_GPIO_Init+0x2d0>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <HAL_GPIO_Init+0x2d0>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_GPIO_Init+0x2d0>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_GPIO_Init+0x2d0>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_GPIO_Init+0x2d0>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_GPIO_Init+0x2d0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_GPIO_Init+0x2d0>)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f47f aeaf 	bne.w	800134c <HAL_GPIO_Init+0x10>
  }
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e002      	b.n	8001664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43d9      	mvns	r1, r3
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	400b      	ands	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f91c 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010400 	.word	0x40010400

080016d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40007000 	.word	0x40007000

080016f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_PWREx_GetVoltageRange+0x18>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171e:	d130      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d038      	beq.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2232      	movs	r2, #50	; 0x32
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001754:	e002      	b.n	800175c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3b01      	subs	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d102      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f2      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177c:	d110      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e00f      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d007      	beq.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f000 bc02 	b.w	8001fd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d0:	4b96      	ldr	r3, [pc, #600]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017da:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80e4 	beq.w	80019ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <HAL_RCC_OscConfig+0x4c>
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b0c      	cmp	r3, #12
 80017fc:	f040 808b 	bne.w	8001916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b01      	cmp	r3, #1
 8001804:	f040 8087 	bne.w	8001916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001808:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x64>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e3d9      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_RCC_OscConfig+0x7e>
 8001830:	4b7e      	ldr	r3, [pc, #504]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001838:	e005      	b.n	8001846 <HAL_RCC_OscConfig+0x8a>
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001846:	4293      	cmp	r3, r2
 8001848:	d223      	bcs.n	8001892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fd8c 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e3ba      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a72      	ldr	r2, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	496d      	ldr	r1, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	4968      	ldr	r1, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
 8001890:	e025      	b.n	80018de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a65      	ldr	r2, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4960      	ldr	r1, [pc, #384]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b0:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	495b      	ldr	r1, [pc, #364]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fd4c 	bl	800236c <RCC_SetFlashLatencyFromMSIRange>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e37a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018de:	f000 fc81 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4950      	ldr	r1, [pc, #320]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_RCC_OscConfig+0x278>)
 80018fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb1e 	bl	8000f44 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d052      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	e35e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d032      	beq.n	8001984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192a:	f7ff fb5b 	bl	8000fe4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001932:	f7ff fb57 	bl	8000fe4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e347      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a35      	ldr	r2, [pc, #212]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4930      	ldr	r1, [pc, #192]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	492b      	ldr	r1, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001984:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001990:	f7ff fb28 	bl	8000fe4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001998:	f7ff fb24 	bl	8000fe4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e314      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1dc>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d073      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x21c>
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d10e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d063      	beq.n	8001aac <HAL_RCC_OscConfig+0x2f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d15f      	bne.n	8001aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e2f1      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x24c>
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e025      	b.n	8001a54 <HAL_RCC_OscConfig+0x298>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d114      	bne.n	8001a3c <HAL_RCC_OscConfig+0x280>
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a02      	ldr	r2, [pc, #8]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e013      	b.n	8001a54 <HAL_RCC_OscConfig+0x298>
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	080040cc 	.word	0x080040cc
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	4ba0      	ldr	r3, [pc, #640]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a9f      	ldr	r2, [pc, #636]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b9d      	ldr	r3, [pc, #628]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a9c      	ldr	r2, [pc, #624]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fac2 	bl	8000fe4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fabe 	bl	8000fe4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e2ae      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a76:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2a8>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff faae 	bl	8000fe4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff faaa 	bl	8000fe4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e29a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2d0>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d060      	beq.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x310>
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d119      	bne.n	8001afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d116      	bne.n	8001afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x328>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e277      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	4973      	ldr	r1, [pc, #460]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	e040      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d023      	beq.n	8001b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa69 	bl	8000fe4 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fa65 	bl	8000fe4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e255      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	495f      	ldr	r1, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff fa45 	bl	8000fe4 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fa41 	bl	8000fe4 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e231      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d03c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d01c      	beq.n	8001bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b96:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa20 	bl	8000fe4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fa1c 	bl	8000fe4 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e20c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ef      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x3ec>
 8001bc8:	e01b      	b.n	8001c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd0:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bda:	f7ff fa03 	bl	8000fe4 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be2:	f7ff f9ff 	bl	8000fe4 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e1ef      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ef      	bne.n	8001be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a6 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x508>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d118      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_OscConfig+0x508>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x508>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c54:	f7ff f9c6 	bl	8000fe4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5c:	f7ff f9c2 	bl	8000fe4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1b2      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_RCC_OscConfig+0x508>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4d8>
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	e029      	b.n	8001ce8 <HAL_RCC_OscConfig+0x52c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d115      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x50c>
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cbc:	e014      	b.n	8001ce8 <HAL_RCC_OscConfig+0x52c>
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	4a99      	ldr	r2, [pc, #612]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd8:	4b96      	ldr	r3, [pc, #600]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	4a95      	ldr	r2, [pc, #596]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d016      	beq.n	8001d1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f978 	bl	8000fe4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f974 	bl	8000fe4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e162      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ed      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x53c>
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f961 	bl	8000fe4 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff f95d 	bl	8000fe4 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e14b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d3c:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ed      	bne.n	8001d26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a77      	ldr	r2, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d03c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01c      	beq.n	8001daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d70:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d76:	4a6f      	ldr	r2, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f930 	bl	8000fe4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d88:	f7ff f92c 	bl	8000fe4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e11c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9a:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ef      	beq.n	8001d88 <HAL_RCC_OscConfig+0x5cc>
 8001da8:	e01b      	b.n	8001de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db0:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff f913 	bl	8000fe4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc2:	f7ff f90f 	bl	8000fe4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ff      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80f3 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	f040 80c9 	bne.w	8001f88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001df6:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0203 	and.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d12c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	3b01      	subs	r3, #1
 8001e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d123      	bne.n	8001e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d11b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d113      	bne.n	8001e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d109      	bne.n	8001e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d06b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d062      	beq.n	8001f30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0ac      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a2d      	ldr	r2, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e86:	f7ff f8ad 	bl	8000fe4 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f8a9 	bl	8000fe4 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e099      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_RCC_OscConfig+0x77c>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ebc:	3a01      	subs	r2, #1
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	4311      	orrs	r1, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ec6:	0212      	lsls	r2, r2, #8
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ece:	0852      	lsrs	r2, r2, #1
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	0552      	lsls	r2, r2, #21
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eda:	0852      	lsrs	r2, r2, #1
 8001edc:	3a01      	subs	r2, #1
 8001ede:	0652      	lsls	r2, r2, #25
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ee6:	06d2      	lsls	r2, r2, #27
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	4912      	ldr	r1, [pc, #72]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f08:	f7ff f86c 	bl	8000fe4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f868 	bl	8000fe4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e058      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_RCC_OscConfig+0x778>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2e:	e050      	b.n	8001fd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e04f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
 8001f34:	40021000 	.word	0x40021000
 8001f38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d144      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f60:	f7ff f840 	bl	8000fe4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff f83c 	bl	8000fe4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e02c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x7ac>
 8001f86:	e024      	b.n	8001fd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d01f      	beq.n	8001fce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f823 	bl	8000fe4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff f81f 	bl	8000fe4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e00f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4905      	ldr	r1, [pc, #20]	; (8001fdc <HAL_RCC_OscConfig+0x820>)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x824>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	feeefffc 	.word	0xfeeefffc

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0e7      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4970      	ldr	r1, [pc, #448]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0cf      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002040:	429a      	cmp	r2, r3
 8002042:	d908      	bls.n	8002056 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4960      	ldr	r1, [pc, #384]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04c      	beq.n	80020fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b5a      	ldr	r3, [pc, #360]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d121      	bne.n	80020ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0a6      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e09a      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e08e      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e086      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4943      	ldr	r1, [pc, #268]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7fe ff8a 	bl	8000fe4 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe ff86 	bl	8000fe4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e06e      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d010      	beq.n	800212a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002114:	429a      	cmp	r2, r3
 8002116:	d208      	bcs.n	800212a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	492b      	ldr	r1, [pc, #172]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d210      	bcs.n	800215a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 0207 	bic.w	r2, r3, #7
 8002140:	4923      	ldr	r1, [pc, #140]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCC_ClockConfig+0x1ec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d001      	beq.n	800215a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e036      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4910      	ldr	r1, [pc, #64]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002198:	f000 f824 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	490b      	ldr	r1, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x1f4>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1fc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fec1 	bl	8000f44 <HAL_InitTick>
 80021c2:	4603      	mov	r3, r0
 80021c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021c6:	7afb      	ldrb	r3, [r7, #11]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	080040cc 	.word	0x080040cc
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x34>
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d121      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d11e      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e005      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002254:	e00a      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d102      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	e004      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d101      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800226a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d134      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0xa6>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d003      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xac>
 8002288:	e005      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800228c:	617b      	str	r3, [r7, #20]
      break;
 800228e:	e005      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002292:	617b      	str	r3, [r7, #20]
      break;
 8002294:	e002      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	3301      	adds	r3, #1
 80022a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	0e5b      	lsrs	r3, r3, #25
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	3301      	adds	r3, #1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022dc:	69bb      	ldr	r3, [r7, #24]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080040e4 	.word	0x080040e4
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	080040dc 	.word	0x080040dc

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002344:	f7ff ffda 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0adb      	lsrs	r3, r3, #11
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	080040dc 	.word	0x080040dc

0800236c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002384:	f7ff f9b6 	bl	80016f4 <HAL_PWREx_GetVoltageRange>
 8002388:	6178      	str	r0, [r7, #20]
 800238a:	e014      	b.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a4:	f7ff f9a6 	bl	80016f4 <HAL_PWREx_GetVoltageRange>
 80023a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023bc:	d10b      	bne.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d919      	bls.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2ba0      	cmp	r3, #160	; 0xa0
 80023c8:	d902      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ca:	2302      	movs	r3, #2
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e013      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	e010      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b80      	cmp	r3, #128	; 0x80
 80023da:	d902      	bls.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023dc:	2303      	movs	r3, #3
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e00a      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d102      	bne.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e8:	2302      	movs	r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e004      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b70      	cmp	r3, #112	; 0x70
 80023f2:	d101      	bne.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 0207 	bic.w	r2, r3, #7
 8002400:	4909      	ldr	r1, [pc, #36]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002434:	2300      	movs	r3, #0
 8002436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002438:	2300      	movs	r3, #0
 800243a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002444:	2b00      	cmp	r3, #0
 8002446:	d031      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002450:	d01a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002452:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002456:	d814      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d009      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800245c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002460:	d10f      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a5c      	ldr	r2, [pc, #368]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246e:	e00c      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f9de 	bl	8002838 <RCCEx_PLLSAI1_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002480:	e003      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	74fb      	strb	r3, [r7, #19]
      break;
 8002486:	e000      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	494e      	ldr	r1, [pc, #312]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024a6:	e001      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 809e 	beq.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024be:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a3f      	ldr	r2, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fd72 	bl	8000fe4 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fd6e 	bl	8000fe4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	74fb      	strb	r3, [r7, #19]
        break;
 8002516:	e005      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15a      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01e      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	429a      	cmp	r2, r3
 8002544:	d019      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002572:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d016      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fd2e 	bl	8000fe4 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	e00b      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe fd2a 	bl	8000fe4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d902      	bls.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	74fb      	strb	r3, [r7, #19]
            break;
 80025a2:	e006      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ec      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	4904      	ldr	r1, [pc, #16]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025ce:	e009      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
 80025d4:	e006      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e4:	7c7b      	ldrb	r3, [r7, #17]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b8a      	ldr	r3, [pc, #552]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a89      	ldr	r2, [pc, #548]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002602:	4b84      	ldr	r3, [pc, #528]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4980      	ldr	r1, [pc, #512]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002624:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 020c 	bic.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	4978      	ldr	r1, [pc, #480]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002646:	4b73      	ldr	r3, [pc, #460]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	496f      	ldr	r1, [pc, #444]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002676:	4967      	ldr	r1, [pc, #412]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268a:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	495e      	ldr	r1, [pc, #376]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ac:	4b59      	ldr	r3, [pc, #356]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	4956      	ldr	r1, [pc, #344]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	494d      	ldr	r1, [pc, #308]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d028      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4945      	ldr	r1, [pc, #276]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270e:	d106      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271a:	60d3      	str	r3, [r2, #12]
 800271c:	e011      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002726:	d10c      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f882 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	492d      	ldr	r1, [pc, #180]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276c:	d106      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276e:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002778:	60d3      	str	r3, [r2, #12]
 800277a:	e011      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f853 	bl	8002838 <RCCEx_PLLSAI1_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	4916      	ldr	r1, [pc, #88]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	2102      	movs	r1, #2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f830 	bl	8002838 <RCCEx_PLLSAI1_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002800:	4904      	ldr	r1, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002808:	7cbb      	ldrb	r3, [r7, #18]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002846:	4b74      	ldr	r3, [pc, #464]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d018      	beq.n	8002884 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002852:	4b71      	ldr	r3, [pc, #452]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d10d      	bne.n	800287e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
       ||
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800286a:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
       ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d047      	beq.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e044      	b.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d018      	beq.n	80028be <RCCEx_PLLSAI1_Config+0x86>
 800288c:	2b03      	cmp	r3, #3
 800288e:	d825      	bhi.n	80028dc <RCCEx_PLLSAI1_Config+0xa4>
 8002890:	2b01      	cmp	r3, #1
 8002892:	d002      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x62>
 8002894:	2b02      	cmp	r3, #2
 8002896:	d009      	beq.n	80028ac <RCCEx_PLLSAI1_Config+0x74>
 8002898:	e020      	b.n	80028dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11d      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028aa:	e01a      	b.n	80028e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d116      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e013      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ca:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028da:	e006      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      break;
 80028e0:	e004      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	430b      	orrs	r3, r1
 8002908:	4943      	ldr	r1, [pc, #268]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d17c      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3f      	ldr	r2, [pc, #252]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800291e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe fb60 	bl	8000fe4 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002926:	e009      	b.n	800293c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002928:	f7fe fb5c 	bl	8000fe4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	73fb      	strb	r3, [r7, #15]
        break;
 800293a:	e005      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ef      	bne.n	8002928 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d15f      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d110      	bne.n	8002976 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800295c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	0211      	lsls	r1, r2, #8
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	06d2      	lsls	r2, r2, #27
 800296c:	430a      	orrs	r2, r1
 800296e:	492a      	ldr	r1, [pc, #168]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	610b      	str	r3, [r1, #16]
 8002974:	e027      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d112      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002984:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	0211      	lsls	r1, r2, #8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6912      	ldr	r2, [r2, #16]
 8002992:	0852      	lsrs	r2, r2, #1
 8002994:	3a01      	subs	r2, #1
 8002996:	0552      	lsls	r2, r2, #21
 8002998:	430a      	orrs	r2, r1
 800299a:	491f      	ldr	r1, [pc, #124]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	610b      	str	r3, [r1, #16]
 80029a0:	e011      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	0211      	lsls	r1, r2, #8
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6952      	ldr	r2, [r2, #20]
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	3a01      	subs	r2, #1
 80029bc:	0652      	lsls	r2, r2, #25
 80029be:	430a      	orrs	r2, r1
 80029c0:	4915      	ldr	r1, [pc, #84]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fb07 	bl	8000fe4 <HAL_GetTick>
 80029d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d8:	e009      	b.n	80029ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029da:	f7fe fb03 	bl	8000fe4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d902      	bls.n	80029ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	73fb      	strb	r3, [r7, #15]
          break;
 80029ec:	e005      	b.n	80029fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ef      	beq.n	80029da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e054      	b.n	8002ad8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d111      	bne.n	8002a5e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fc16 	bl	8003274 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_Init+0xc4>)
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f000 fb01 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08000a2d 	.word	0x08000a2d

08002ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e03b      	b.n	8002b74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x4e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x4e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d115      	bne.n	8002b5e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_TIM_Base_Start_IT+0xa4>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d015      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x8c>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4a:	d011      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	e008      	b.n	8002b70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40014000 	.word	0x40014000
 8002b88:	00010007 	.word	0x00010007

08002b8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f240 4344 	movw	r3, #1092	; 0x444
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_Base_Stop_IT+0x48>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d026      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d021      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0202 	mvn.w	r2, #2
 8002c1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
 8002c3e:	e009      	b.n	8002c54 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d026      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d021      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0204 	mvn.w	r2, #4
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
 8002c96:	e009      	b.n	8002cac <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d026      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d021      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f06f 0208 	mvn.w	r2, #8
 8002cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
 8002cee:	e009      	b.n	8002d04 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d026      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d021      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0210 	mvn.w	r2, #16
 8002d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
 8002d46:	e009      	b.n	8002d5c <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0201 	mvn.w	r2, #1
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x240>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x240>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0220 	mvn.w	r2, #32
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_ConfigClockSource+0x1c>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0b6      	b.n	8002fbc <HAL_TIM_ConfigClockSource+0x18a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8a:	d03e      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xd8>
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	f200 8087 	bhi.w	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e98:	f000 8086 	beq.w	8002fa8 <HAL_TIM_ConfigClockSource+0x176>
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d87f      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ea2:	2b70      	cmp	r3, #112	; 0x70
 8002ea4:	d01a      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xaa>
 8002ea6:	2b70      	cmp	r3, #112	; 0x70
 8002ea8:	d87b      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eaa:	2b60      	cmp	r3, #96	; 0x60
 8002eac:	d050      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0x11e>
 8002eae:	2b60      	cmp	r3, #96	; 0x60
 8002eb0:	d877      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eb2:	2b50      	cmp	r3, #80	; 0x50
 8002eb4:	d03c      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0xfe>
 8002eb6:	2b50      	cmp	r3, #80	; 0x50
 8002eb8:	d873      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d058      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0x13e>
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d86f      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ec2:	2b30      	cmp	r3, #48	; 0x30
 8002ec4:	d064      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ec6:	2b30      	cmp	r3, #48	; 0x30
 8002ec8:	d86b      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d060      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d867      	bhi.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d05c      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d05a      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x15e>
 8002eda:	e062      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	f000 f9a2 	bl	8003234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002efe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
      break;
 8002f08:	e04f      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	f000 f98b 	bl	8003234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f2c:	609a      	str	r2, [r3, #8]
      break;
 8002f2e:	e03c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f000 f8ff 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2150      	movs	r1, #80	; 0x50
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f958 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f4e:	e02c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f000 f91e 	bl	800319e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2160      	movs	r1, #96	; 0x60
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f948 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f6e:	e01c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f000 f8df 	bl	8003140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2140      	movs	r1, #64	; 0x40
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f938 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 f92f 	bl	80031fe <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <TIM_Base_SetConfig+0xbc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_Base_SetConfig+0x20>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d108      	bne.n	80030aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <TIM_Base_SetConfig+0xbc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00b      	beq.n	80030ca <TIM_Base_SetConfig+0x52>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d007      	beq.n	80030ca <TIM_Base_SetConfig+0x52>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d003      	beq.n	80030ca <TIM_Base_SetConfig+0x52>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <TIM_Base_SetConfig+0xc4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d108      	bne.n	80030dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <TIM_Base_SetConfig+0xbc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0xa0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0xa0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <TIM_Base_SetConfig+0xc4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	031b      	lsls	r3, r3, #12
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	f043 0307 	orr.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	021a      	lsls	r2, r3, #8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <TIM_ResetCallback+0x84>)
 8003280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <TIM_ResetCallback+0x88>)
 8003288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <TIM_ResetCallback+0x8c>)
 8003290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <TIM_ResetCallback+0x90>)
 8003298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <TIM_ResetCallback+0x94>)
 80032a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <TIM_ResetCallback+0x98>)
 80032a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <TIM_ResetCallback+0x9c>)
 80032b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <TIM_ResetCallback+0xa0>)
 80032b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <TIM_ResetCallback+0xa4>)
 80032c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <TIM_ResetCallback+0xa8>)
 80032c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_ResetCallback+0xac>)
 80032d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <TIM_ResetCallback+0xb0>)
 80032d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <TIM_ResetCallback+0xb4>)
 80032e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <TIM_ResetCallback+0xb8>)
 80032e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	08000e39 	.word	0x08000e39
 80032fc:	08002fc5 	.word	0x08002fc5
 8003300:	0800303d 	.word	0x0800303d
 8003304:	08003051 	.word	0x08003051
 8003308:	08002fed 	.word	0x08002fed
 800330c:	08003001 	.word	0x08003001
 8003310:	08002fd9 	.word	0x08002fd9
 8003314:	08003015 	.word	0x08003015
 8003318:	08003029 	.word	0x08003029
 800331c:	08003065 	.word	0x08003065
 8003320:	080033fd 	.word	0x080033fd
 8003324:	08003411 	.word	0x08003411
 8003328:	08003425 	.word	0x08003425
 800332c:	08003439 	.word	0x08003439

08003330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003344:	2302      	movs	r3, #2
 8003346:	e04f      	b.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d004      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10c      	bne.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014000 	.word	0x40014000

080033fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e040      	b.n	80034e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fb30 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fb46 	bl	8003b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f917 	bl	80036cc <UART_SetConfig>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01b      	b.n	80034e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fbc5 	bl	8003c68 <UART_CheckIdleState>
 80034de:	4603      	mov	r3, r0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d178      	bne.n	80035f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Transmit+0x24>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e071      	b.n	80035f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2221      	movs	r2, #33	; 0x21
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fd fd61 	bl	8000fe4 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d108      	bne.n	8003550 <HAL_UART_Transmit+0x68>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e003      	b.n	8003558 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003558:	e030      	b.n	80035bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fc27 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e03c      	b.n	80035f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	b292      	uxth	r2, r2
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	3302      	adds	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e008      	b.n	80035aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b292      	uxth	r2, r2
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1c8      	bne.n	800355a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fbf0 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e005      	b.n	80035f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
  }
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	61fb      	str	r3, [r7, #28]
   return(result);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <HAL_UART_AbortTransmit+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d137      	bne.n	80036b4 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60bb      	str	r3, [r7, #8]
   return(result);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003664:	61ba      	str	r2, [r7, #24]
 8003666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	613b      	str	r3, [r7, #16]
   return(result);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e5      	bne.n	8003644 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	2b00      	cmp	r3, #0
 800367e:	d019      	beq.n	80036b4 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	2200      	movs	r2, #0
 8003686:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fe0a 	bl	80012a6 <HAL_DMA_Abort>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fe40 	bl	8001322 <HAL_DMA_GetError>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d105      	bne.n	80036b4 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2210      	movs	r2, #16
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e007      	b.n	80036c4 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3738      	adds	r7, #56	; 0x38
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b08a      	sub	sp, #40	; 0x28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4bb4      	ldr	r3, [pc, #720]	; (80039cc <UART_SetConfig+0x300>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003704:	430b      	orrs	r3, r1
 8003706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4aa9      	ldr	r2, [pc, #676]	; (80039d0 <UART_SetConfig+0x304>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	4313      	orrs	r3, r2
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4aa0      	ldr	r2, [pc, #640]	; (80039d4 <UART_SetConfig+0x308>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d126      	bne.n	80037a4 <UART_SetConfig+0xd8>
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <UART_SetConfig+0x30c>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b03      	cmp	r3, #3
 8003762:	d81b      	bhi.n	800379c <UART_SetConfig+0xd0>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <UART_SetConfig+0xa0>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800378d 	.word	0x0800378d
 8003774:	08003785 	.word	0x08003785
 8003778:	08003795 	.word	0x08003795
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e080      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003784:	2302      	movs	r3, #2
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e07c      	b.n	8003886 <UART_SetConfig+0x1ba>
 800378c:	2304      	movs	r3, #4
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e078      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003794:	2308      	movs	r3, #8
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e074      	b.n	8003886 <UART_SetConfig+0x1ba>
 800379c:	2310      	movs	r3, #16
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e070      	b.n	8003886 <UART_SetConfig+0x1ba>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a8c      	ldr	r2, [pc, #560]	; (80039dc <UART_SetConfig+0x310>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d138      	bne.n	8003820 <UART_SetConfig+0x154>
 80037ae:	4b8a      	ldr	r3, [pc, #552]	; (80039d8 <UART_SetConfig+0x30c>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d82d      	bhi.n	8003818 <UART_SetConfig+0x14c>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <UART_SetConfig+0xf8>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003819 	.word	0x08003819
 80037cc:	08003819 	.word	0x08003819
 80037d0:	08003819 	.word	0x08003819
 80037d4:	08003809 	.word	0x08003809
 80037d8:	08003819 	.word	0x08003819
 80037dc:	08003819 	.word	0x08003819
 80037e0:	08003819 	.word	0x08003819
 80037e4:	08003801 	.word	0x08003801
 80037e8:	08003819 	.word	0x08003819
 80037ec:	08003819 	.word	0x08003819
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003811 	.word	0x08003811
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e042      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003800:	2302      	movs	r3, #2
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e03e      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003808:	2304      	movs	r3, #4
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e03a      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003810:	2308      	movs	r3, #8
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e036      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003818:	2310      	movs	r3, #16
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e032      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <UART_SetConfig+0x304>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d12a      	bne.n	8003880 <UART_SetConfig+0x1b4>
 800382a:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <UART_SetConfig+0x30c>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003838:	d01a      	beq.n	8003870 <UART_SetConfig+0x1a4>
 800383a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800383e:	d81b      	bhi.n	8003878 <UART_SetConfig+0x1ac>
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003844:	d00c      	beq.n	8003860 <UART_SetConfig+0x194>
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d815      	bhi.n	8003878 <UART_SetConfig+0x1ac>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <UART_SetConfig+0x18c>
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d008      	beq.n	8003868 <UART_SetConfig+0x19c>
 8003856:	e00f      	b.n	8003878 <UART_SetConfig+0x1ac>
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e012      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e00e      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003868:	2304      	movs	r3, #4
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e00a      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e006      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e002      	b.n	8003886 <UART_SetConfig+0x1ba>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a51      	ldr	r2, [pc, #324]	; (80039d0 <UART_SetConfig+0x304>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d17a      	bne.n	8003986 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003894:	2b08      	cmp	r3, #8
 8003896:	d824      	bhi.n	80038e2 <UART_SetConfig+0x216>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x1d4>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038e3 	.word	0x080038e3
 80038a8:	080038cd 	.word	0x080038cd
 80038ac:	080038e3 	.word	0x080038e3
 80038b0:	080038d3 	.word	0x080038d3
 80038b4:	080038e3 	.word	0x080038e3
 80038b8:	080038e3 	.word	0x080038e3
 80038bc:	080038e3 	.word	0x080038e3
 80038c0:	080038db 	.word	0x080038db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fd26 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 80038c8:	61f8      	str	r0, [r7, #28]
        break;
 80038ca:	e010      	b.n	80038ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b44      	ldr	r3, [pc, #272]	; (80039e0 <UART_SetConfig+0x314>)
 80038ce:	61fb      	str	r3, [r7, #28]
        break;
 80038d0:	e00d      	b.n	80038ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7fe fc87 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80038d6:	61f8      	str	r0, [r7, #28]
        break;
 80038d8:	e009      	b.n	80038ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038de:	61fb      	str	r3, [r7, #28]
        break;
 80038e0:	e005      	b.n	80038ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8107 	beq.w	8003b04 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	429a      	cmp	r2, r3
 8003904:	d305      	bcc.n	8003912 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	429a      	cmp	r2, r3
 8003910:	d903      	bls.n	800391a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003918:	e0f4      	b.n	8003b04 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2200      	movs	r2, #0
 800391e:	461c      	mov	r4, r3
 8003920:	4615      	mov	r5, r2
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	022b      	lsls	r3, r5, #8
 800392c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003930:	0222      	lsls	r2, r4, #8
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	6849      	ldr	r1, [r1, #4]
 8003936:	0849      	lsrs	r1, r1, #1
 8003938:	2000      	movs	r0, #0
 800393a:	4688      	mov	r8, r1
 800393c:	4681      	mov	r9, r0
 800393e:	eb12 0a08 	adds.w	sl, r2, r8
 8003942:	eb43 0b09 	adc.w	fp, r3, r9
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003954:	4650      	mov	r0, sl
 8003956:	4659      	mov	r1, fp
 8003958:	f7fc fc40 	bl	80001dc <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396a:	d308      	bcc.n	800397e <UART_SetConfig+0x2b2>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003972:	d204      	bcs.n	800397e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	e0c2      	b.n	8003b04 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003984:	e0be      	b.n	8003b04 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	d16a      	bne.n	8003a66 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003994:	2b08      	cmp	r3, #8
 8003996:	d834      	bhi.n	8003a02 <UART_SetConfig+0x336>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0x2d4>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039ed 	.word	0x080039ed
 80039ac:	08003a03 	.word	0x08003a03
 80039b0:	080039f3 	.word	0x080039f3
 80039b4:	08003a03 	.word	0x08003a03
 80039b8:	08003a03 	.word	0x08003a03
 80039bc:	08003a03 	.word	0x08003a03
 80039c0:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe fca6 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 80039c8:	61f8      	str	r0, [r7, #28]
        break;
 80039ca:	e020      	b.n	8003a0e <UART_SetConfig+0x342>
 80039cc:	efff69f3 	.word	0xefff69f3
 80039d0:	40008000 	.word	0x40008000
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400
 80039e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe fcac 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80039e8:	61f8      	str	r0, [r7, #28]
        break;
 80039ea:	e010      	b.n	8003a0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b4c      	ldr	r3, [pc, #304]	; (8003b20 <UART_SetConfig+0x454>)
 80039ee:	61fb      	str	r3, [r7, #28]
        break;
 80039f0:	e00d      	b.n	8003a0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe fbf7 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 80039f6:	61f8      	str	r0, [r7, #28]
        break;
 80039f8:	e009      	b.n	8003a0e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	61fb      	str	r3, [r7, #28]
        break;
 8003a00:	e005      	b.n	8003a0e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d077      	beq.n	8003b04 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005a      	lsls	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	441a      	add	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d916      	bls.n	8003a5e <UART_SetConfig+0x392>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d212      	bcs.n	8003a5e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f023 030f 	bic.w	r3, r3, #15
 8003a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	8afb      	ldrh	r3, [r7, #22]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	8afa      	ldrh	r2, [r7, #22]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	e052      	b.n	8003b04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a64:	e04e      	b.n	8003b04 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d827      	bhi.n	8003abe <UART_SetConfig+0x3f2>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0x3a8>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe fc3c 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003a9c:	61f8      	str	r0, [r7, #28]
        break;
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe fc4e 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	61f8      	str	r0, [r7, #28]
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <UART_SetConfig+0x454>)
 8003aaa:	61fb      	str	r3, [r7, #28]
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fb99 	bl	80021e4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	61f8      	str	r0, [r7, #28]
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	61fb      	str	r3, [r7, #28]
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d019      	beq.n	8003b04 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	085a      	lsrs	r2, r3, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	d909      	bls.n	8003afe <UART_SetConfig+0x432>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d205      	bcs.n	8003afe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	e002      	b.n	8003b04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b1e:	bf00      	nop
 8003b20:	00f42400 	.word	0x00f42400

08003b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d10a      	bne.n	8003c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b098      	sub	sp, #96	; 0x60
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c78:	f7fd f9b4 	bl	8000fe4 <HAL_GetTick>
 8003c7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d12e      	bne.n	8003cea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f88c 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d021      	beq.n	8003cea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e062      	b.n	8003db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d149      	bne.n	8003d8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f856 	bl	8003db8 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03c      	beq.n	8003d8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d64:	61fa      	str	r2, [r7, #28]
 8003d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	69b9      	ldr	r1, [r7, #24]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	617b      	str	r3, [r7, #20]
   return(result);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e011      	b.n	8003db0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3758      	adds	r7, #88	; 0x58
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	e049      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d045      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fd f907 	bl	8000fe4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e048      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d031      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d110      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f838 	bl	8003e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e029      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e38:	d111      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f81e 	bl	8003e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e00f      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0a6      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b095      	sub	sp, #84	; 0x54
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eac:	643b      	str	r3, [r7, #64]	; 0x40
 8003eae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e6      	bne.n	8003e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3308      	adds	r3, #8
 8003ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d118      	bne.n	8003f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f023 0310 	bic.w	r3, r3, #16
 8003f10:	647b      	str	r3, [r7, #68]	; 0x44
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6979      	ldr	r1, [r7, #20]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	613b      	str	r3, [r7, #16]
   return(result);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e6      	bne.n	8003efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f42:	bf00      	nop
 8003f44:	3754      	adds	r7, #84	; 0x54
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <memset>:
 8003f4e:	4402      	add	r2, r0
 8003f50:	4603      	mov	r3, r0
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d100      	bne.n	8003f58 <memset+0xa>
 8003f56:	4770      	bx	lr
 8003f58:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5c:	e7f9      	b.n	8003f52 <memset+0x4>
	...

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	; (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 f818 	bl	8003fa8 <_init>
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	0800411c 	.word	0x0800411c
 8003f9c:	0800411c 	.word	0x0800411c
 8003fa0:	0800411c 	.word	0x0800411c
 8003fa4:	08004120 	.word	0x08004120

08003fa8 <_init>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

08003fb4 <_fini>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr
