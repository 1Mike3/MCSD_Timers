
Timer_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b70  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e68  08003e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e70  08003e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003e84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003e84  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116d7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002501  00000000  00000000  00031756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c16  00000000  00000000  00034bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fc3  00000000  00000000  000357ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012623  00000000  00000000  000567b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c960a  00000000  00000000  00068dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004070  00000000  00000000  001323e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00136450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ce4 	.word	0x08003ce4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003ce4 	.word	0x08003ce4

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <printDebug>:
#include "main.h"
#include "string.h"


// Print a message using the UART Interface
void printDebug(UART_HandleTypeDef * huart, char * text){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
       HAL_UART_Transmit(huart, (uint8_t *) text, strlen(text),100);
 80004e2:	6838      	ldr	r0, [r7, #0]
 80004e4:	f7ff fe72 	bl	80001cc <strlen>
 80004e8:	4603      	mov	r3, r0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f002 fe97 	bl	8003224 <HAL_UART_Transmit>
	        HAL_UART_AbortTransmit(huart);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f002 ff1e 	bl	8003338 <HAL_UART_AbortTransmit>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fc8d 	bl	8000e26 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f830 	bl	8000570 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f97e 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f94c 	bl	80007b0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000518:	f000 f8da 	bl	80006d0 <MX_TIM6_Init>
  MX_TIM2_Init();
 800051c:	f000 f88a 	bl	8000634 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000520:	f000 f90e 	bl	8000740 <MX_TIM7_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Just a friendly neighborhood debug helper statement
  printDebug(&huart2 ,"   New Program Start  \n\n \r");
 8000524:	490d      	ldr	r1, [pc, #52]	; (800055c <main+0x58>)
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <main+0x5c>)
 8000528:	f7ff ffd6 	bl	80004d8 <printDebug>
  // Deactivate Pin 6 which is High on startup
  // I know not the prettiest but the quickest fix
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f001 f803 	bl	800153c <HAL_GPIO_TogglePin>

    /* USER CODE BEGIN 3 */
	//  _tim_timeout_blocking(4000);
	  //for Test with button detection
	  //Default running
	  if(buttonPressed == 0){
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <main+0x60>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d104      	bne.n	8000548 <main+0x44>
		  _tim_timeout_blocking(DELAYTIME_BLOCKING);
 800053e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000542:	f000 fba3 	bl	8000c8c <_tim_timeout_blocking>
 8000546:	e004      	b.n	8000552 <main+0x4e>
	  }else{

		  _tim_timeout_nonblocking_with_callback(DELAYTIME_NONBLOCKING, * customCallbackFunction );
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <main+0x64>)
 800054a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800054e:	f000 fbc9 	bl	8000ce4 <_tim_timeout_nonblocking_with_callback>
	  }
	 // HAL_Delay(3000);
	  printDebug(&huart2 ,"  In Main Loop \n\n \r");
 8000552:	4906      	ldr	r1, [pc, #24]	; (800056c <main+0x68>)
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <main+0x5c>)
 8000556:	f7ff ffbf 	bl	80004d8 <printDebug>
	  if(buttonPressed == 0){
 800055a:	e7ec      	b.n	8000536 <main+0x32>
 800055c:	08003cfc 	.word	0x08003cfc
 8000560:	20000110 	.word	0x20000110
 8000564:	20000028 	.word	0x20000028
 8000568:	08000d45 	.word	0x08000d45
 800056c:	08003d18 	.word	0x08003d18

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fb83 	bl	8003c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f001 f821 	bl	80015dc <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fa28 	bl	80009f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a4:	f000 fffc 	bl	80015a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xc0>)
 80005aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xc0>)
 80005b0:	f023 0318 	bic.w	r3, r3, #24
 80005b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b8:	2314      	movs	r3, #20
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f84b 	bl	8001688 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f9fc 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fc4b 	bl	8001eb0 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000620:	f000 f9e8 	bl	80009f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000624:	f002 f85e 	bl	80026e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_TIM2_Init+0x98>)
 8000654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_TIM2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM2_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_TIM2_Init+0x98>)
 8000668:	f04f 32ff 	mov.w	r2, #4294967295
 800066c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_TIM2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067a:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_TIM2_Init+0x98>)
 800067c:	f002 f934 	bl	80028e8 <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000686:	f000 f9b5 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_TIM2_Init+0x98>)
 8000698:	f002 fb03 	bl	8002ca2 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006a2:	f000 f9a7 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_TIM2_Init+0x98>)
 80006b4:	f002 fce4 	bl	8003080 <HAL_TIMEx_MasterConfigSynchronization>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006be:	f000 f999 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000002c 	.word	0x2000002c

080006d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_TIM6_Init+0x68>)
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <MX_TIM6_Init+0x6c>)
 80006e4:	601a      	str	r2, [r3, #0]
 htim6.Init.Prescaler = 32000-1;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_TIM6_Init+0x68>)
 80006e8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80006ec:	605a      	str	r2, [r3, #4]

  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_TIM6_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64535;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_TIM6_Init+0x68>)
 80006f6:	f64f 4217 	movw	r2, #64535	; 0xfc17
 80006fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_TIM6_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_TIM6_Init+0x68>)
 8000704:	f002 f8f0 	bl	80028e8 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800070e:	f000 f971 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_TIM6_Init+0x68>)
 8000720:	f002 fcae 	bl	8003080 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800072a:	f000 f963 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	40001000 	.word	0x40001000

08000740 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_TIM7_Init+0x6c>)
 8000754:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 32000-1;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000758:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800075c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM7_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000774:	f002 f8b8 	bl	80028e8 <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800077e:	f000 f939 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_TIM7_Init+0x68>)
 8000790:	f002 fc76 	bl	8003080 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 f92b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	40001400 	.word	0x40001400

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	f002 fcc8 	bl	8003188 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8f9 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000110 	.word	0x20000110
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a2d      	ldr	r2, [pc, #180]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xe8>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_GPIO_Init+0xe8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fe48 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_STATUS_GPIO_Port, BOARD_STATUS_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2108      	movs	r1, #8
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_GPIO_Init+0xec>)
 8000882:	f000 fe43 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fcb3 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80008a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fca3 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_STATUS_Pin */
  GPIO_InitStruct.Pin = BOARD_STATUS_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_STATUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0xec>)
 80008da:	f000 fc95 	bl	8001208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2009      	movs	r0, #9
 80008e4:	f000 fc0f 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008e8:	2009      	movs	r0, #9
 80008ea:	f000 fc28 	bl	800113e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_GPIO_EXTI_Callback>:
// My Overwriiten Interrupts



	//Button Interrupt -- without debouncing for now
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
}
 800090c:	bf00      	nop
	__disable_irq();
	HAL_SuspendTick();
 800090e:	f000 faff 	bl	8000f10 <HAL_SuspendTick>
//

	// Extra logic for correct button determination and pressed again override
	bool pinCorrect = (GPIO_Pin == GPIO_PIN_3);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	2b08      	cmp	r3, #8
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
	bool firstState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800091e:	2108      	movs	r1, #8
 8000920:	482f      	ldr	r0, [pc, #188]	; (80009e0 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000922:	f000 fddb 	bl	80014dc <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	73bb      	strb	r3, [r7, #14]
	bool debounceSucessfull = false;
 8000932:	2300      	movs	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

	// Extra logic for Debouncing (very crude, i know but not part of the assignment
	for (int i = 0; i < 1000000; ++i) {
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	e002      	b.n	8000942 <HAL_GPIO_EXTI_Callback+0x42>
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4a27      	ldr	r2, [pc, #156]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	ddf8      	ble.n	800093c <HAL_GPIO_EXTI_Callback+0x3c>
				;
			}
	bool secondState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800094a:	2108      	movs	r1, #8
 800094c:	4824      	ldr	r0, [pc, #144]	; (80009e0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800094e:	f000 fdc5 	bl	80014dc <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	bf14      	ite	ne
 8000958:	2301      	movne	r3, #1
 800095a:	2300      	moveq	r3, #0
 800095c:	737b      	strb	r3, [r7, #13]
	if(secondState == firstState){
 800095e:	7b7a      	ldrb	r2, [r7, #13]
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	429a      	cmp	r2, r3
 8000964:	d101      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0x6a>
		debounceSucessfull = true;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
	}

	if(pinCorrect && debounceSucessfull){
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d02f      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0xd0>
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d02c      	beq.n	80009d0 <HAL_GPIO_EXTI_Callback+0xd0>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000976:	2108      	movs	r1, #8
 8000978:	4819      	ldr	r0, [pc, #100]	; (80009e0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800097a:	f000 fddf 	bl	800153c <HAL_GPIO_TogglePin>
		//_tim_timeout_blocking(2000);
		printDebug(&huart2 ,"  button action  \n\n \r");
 800097e:	491a      	ldr	r1, [pc, #104]	; (80009e8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <HAL_GPIO_EXTI_Callback+0xec>)
 8000982:	f7ff fda9 	bl	80004d8 <printDebug>
		if(buttonPressed == 0){
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d110      	bne.n	80009b0 <HAL_GPIO_EXTI_Callback+0xb0>
			buttonPressed = 1;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fdb5 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fdaf 	bl	800150c <HAL_GPIO_WritePin>
 80009ae:	e00f      	b.n	80009d0 <HAL_GPIO_EXTI_Callback+0xd0>
		}else{
			buttonPressed = 0;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_GPIO_EXTI_Callback+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f000 fda5 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fd9e 	bl	800150c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80009d0:	b662      	cpsie	i
}
 80009d2:	bf00      	nop
		}
	}

	__enable_irq();
	HAL_ResumeTick();
 80009d4:	f000 faac 	bl	8000f30 <HAL_ResumeTick>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	48000400 	.word	0x48000400
 80009e4:	000f423f 	.word	0x000f423f
 80009e8:	08003d2c 	.word	0x08003d2c
 80009ec:	20000110 	.word	0x20000110
 80009f0:	20000028 	.word	0x20000028

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();
  printDebug(&huart2 ,"  You done Upsi and stuck in Error handeler  \n\n \r");
 80009fc:	4904      	ldr	r1, [pc, #16]	; (8000a10 <Error_Handler+0x1c>)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <Error_Handler+0x20>)
 8000a00:	f7ff fd6a 	bl	80004d8 <printDebug>
  // Toggle Red LED:
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fd97 	bl	800153c <HAL_GPIO_TogglePin>

  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <Error_Handler+0x1a>
 8000a10:	08003d44 	.word	0x08003d44
 8000a14:	20000110 	.word	0x20000110

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d10c      	bne.n	8000a8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000a8a:	e032      	b.n	8000af2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <HAL_TIM_Base_MspInit+0xa0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d114      	bne.n	8000ac0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2036      	movs	r0, #54	; 0x36
 8000ab4:	f000 fb27 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ab8:	2036      	movs	r0, #54	; 0x36
 8000aba:	f000 fb40 	bl	800113e <HAL_NVIC_EnableIRQ>
}
 8000abe:	e018      	b.n	8000af2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_TIM_Base_MspInit+0xa4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d113      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x9c>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2037      	movs	r0, #55	; 0x37
 8000ae8:	f000 fb0d 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000aec:	2037      	movs	r0, #55	; 0x37
 8000aee:	f000 fb26 	bl	800113e <HAL_NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40001000 	.word	0x40001000
 8000b04:	40001400 	.word	0x40001400

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	; 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	; 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f8ae 	bl	8003c8a <memset>
  if(huart->Instance==USART2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d148      	bne.n	8000bca <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fbd7 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b50:	f7ff ff50 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b84:	2304      	movs	r3, #4
 8000b86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fb31 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000baa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fb1f 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3778      	adds	r7, #120	; 0x78
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f952 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c34:	2008      	movs	r0, #8
 8000c36:	f000 fc9b 	bl	8001570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 ff2a 	bl	8002a9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000078 	.word	0x20000078

08000c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM7_IRQHandler+0x10>)
 8000c5a:	f001 ff20 	bl	8002a9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000c4 	.word	0x200000c4

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <_tim_timeout_blocking>:
// UART handle
extern UART_HandleTypeDef huart2;

//Timer INIT is done in main.c

void _tim_timeout_blocking(uint32_t time){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	 printDebug(&huart2 ,"  Entered blocking function \n\n \r");
 8000c94:	490f      	ldr	r1, [pc, #60]	; (8000cd4 <_tim_timeout_blocking+0x48>)
 8000c96:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <_tim_timeout_blocking+0x4c>)
 8000c98:	f7ff fc1e 	bl	80004d8 <printDebug>
	 //Activate The Timer
	 HAL_TIM_Base_Init(&htim6);
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <_tim_timeout_blocking+0x50>)
 8000c9e:	f001 fe23 	bl	80028e8 <HAL_TIM_Base_Init>
	 TIM6->ARR = time;
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <_tim_timeout_blocking+0x54>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&htim6);
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <_tim_timeout_blocking+0x50>)
 8000caa:	f001 fe75 	bl	8002998 <HAL_TIM_Base_Start_IT>

	  // Old school way, worked but trying correct sleep mode

	  //Put the System in Idle while the Timer Runs
	  int timerStatus = 1; // 0 == TimerIsCounting, 1 == Timer has counted up to it's Value
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000cb2:	e007      	b.n	8000cc4 <_tim_timeout_blocking+0x38>
		  timerStatus = (TIM6->SR != 0x1); //Checking for the status of the SR Register
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <_tim_timeout_blocking+0x54>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	bf14      	ite	ne
 8000cbc:	2301      	movne	r3, #1
 8000cbe:	2300      	moveq	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f4      	bne.n	8000cb4 <_tim_timeout_blocking+0x28>
	  // According to Documentation Systicks have to be disabled ... so lets do this
	  HAL_SuspendTick();
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  HAL_ResumeTick();
*/
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08003d78 	.word	0x08003d78
 8000cd8:	20000110 	.word	0x20000110
 8000cdc:	20000078 	.word	0x20000078
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <_tim_timeout_nonblocking_with_callback>:


void _tim_timeout_nonblocking_with_callback(uint16_t time,void (*callbacFunction)(void) ){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	80fb      	strh	r3, [r7, #6]

	 printDebug(&huart2 ,"  Entered NON blocking function \n\n \r");
 8000cf0:	4910      	ldr	r1, [pc, #64]	; (8000d34 <_tim_timeout_nonblocking_with_callback+0x50>)
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <_tim_timeout_nonblocking_with_callback+0x54>)
 8000cf4:	f7ff fbf0 	bl	80004d8 <printDebug>
	 //Activate The Timer
	 HAL_TIM_Base_Init(&htim7);
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <_tim_timeout_nonblocking_with_callback+0x58>)
 8000cfa:	f001 fdf5 	bl	80028e8 <HAL_TIM_Base_Init>
	 TIM7->ARR = time;
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <_tim_timeout_nonblocking_with_callback+0x5c>)
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	62d3      	str	r3, [r2, #44]	; 0x2c
	  HAL_TIM_Base_Start_IT(&htim7);
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <_tim_timeout_nonblocking_with_callback+0x58>)
 8000d06:	f001 fe47 	bl	8002998 <HAL_TIM_Base_Start_IT>

	  // Old school way, worked but trying correct sleep mode

	  //Put the System in Idle while the Timer Runs
	  int timerStatus = 1; // 0 == TimerIsCounting, 1 == Timer has counted up to it's Value
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000d0e:	e007      	b.n	8000d20 <_tim_timeout_nonblocking_with_callback+0x3c>
		  timerStatus = (TIM7->SR != 0x1); //Checking for the status of the SR Register
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <_tim_timeout_nonblocking_with_callback+0x5c>)
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	60fb      	str	r3, [r7, #12]
	  while(timerStatus){
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f4      	bne.n	8000d10 <_tim_timeout_nonblocking_with_callback+0x2c>
		//  printDebug(&huart2 ,"  Timer is Waiting  \n\n \r");
		//  HAL_Delay(1000);
	  }


	callbacFunction();
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	4798      	blx	r3
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	08003d9c 	.word	0x08003d9c
 8000d38:	20000110 	.word	0x20000110
 8000d3c:	200000c4 	.word	0x200000c4
 8000d40:	40001400 	.word	0x40001400

08000d44 <customCallbackFunction>:

void customCallbackFunction(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	printDebug(&huart2 ,"  enteredCallbackFucntion \n\n \r");
 8000d48:	4902      	ldr	r1, [pc, #8]	; (8000d54 <customCallbackFunction+0x10>)
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <customCallbackFunction+0x14>)
 8000d4c:	f7ff fbc4 	bl	80004d8 <printDebug>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08003dc4 	.word	0x08003dc4
 8000d58:	20000110 	.word	0x20000110

08000d5c <HAL_TIM_PeriodElapsedCallback>:



// Interrupt Routine
//TIM 6 Interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d111      	bne.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0x34>
		// Print Debug Message
		 printDebug(&huart2 ,"  Entered Interrupt  \n\n \r");
 8000d6c:	4915      	ldr	r1, [pc, #84]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d6e:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d70:	f7ff fbb2 	bl	80004d8 <printDebug>
		  // Toggle the Green LED Pin
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f000 fbde 	bl	800153c <HAL_GPIO_TogglePin>
		  //TIM6->ARR &= 0x0;
		  HAL_TIM_Base_Stop_IT(&htim6);
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d82:	f001 fe5d 	bl	8002a40 <HAL_TIM_Base_Stop_IT>
		  	  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
 8000d86:	4911      	ldr	r1, [pc, #68]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d8a:	f7ff fba5 	bl	80004d8 <printDebug>
			  //TIM6->ARR &= 0x0;
			  HAL_TIM_Base_Stop_IT(&htim7);
			  	  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
	}

}
 8000d8e:	e013      	b.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (htim == &htim7){
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d10f      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			 printDebug(&huart2 ,"  Entered Interrupt  \n\n \r");
 8000d98:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d9c:	f7ff fb9c 	bl	80004d8 <printDebug>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000da0:	2140      	movs	r1, #64	; 0x40
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f000 fbc9 	bl	800153c <HAL_GPIO_TogglePin>
			  HAL_TIM_Base_Stop_IT(&htim7);
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dac:	f001 fe48 	bl	8002a40 <HAL_TIM_Base_Stop_IT>
			  	  printDebug(&huart2 ,"  Timer Finished Waiting  \n\n \r");
 8000db0:	4906      	ldr	r1, [pc, #24]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000db4:	f7ff fb90 	bl	80004d8 <printDebug>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000078 	.word	0x20000078
 8000dc4:	08003de4 	.word	0x08003de4
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	08003e00 	.word	0x08003e00
 8000dd0:	200000c4 	.word	0x200000c4

08000dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff ff46 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f002 ff4b 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e06:	f7ff fb7d 	bl	8000504 <main>

08000e0a <LoopForever>:

LoopForever:
    b LoopForever
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e18:	08003e78 	.word	0x08003e78
  ldr r2, =_sbss
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e20:	2000019c 	.word	0x2000019c

08000e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_IRQHandler>

08000e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f95d 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f80e 	bl	8000e58 <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	e001      	b.n	8000e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e48:	f7ff fde6 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d023      	beq.n	8000eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_InitTick+0x70>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f969 	bl	800115a <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10f      	bne.n	8000eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d809      	bhi.n	8000ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f933 	bl	8001106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_InitTick+0x74>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e004      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e001      	b.n	8000eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000198 	.word	0x20000198

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000198 	.word	0x20000198

08000f10 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_SuspendTick+0x1c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_SuspendTick+0x1c>)
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_ResumeTick+0x1c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_ResumeTick+0x1c>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d008      	beq.n	800119c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2204      	movs	r2, #4
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e022      	b.n	80011e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 020e 	bic.w	r2, r2, #14
 80011aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f003 021c 	and.w	r2, r3, #28
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e148      	b.n	80014aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 813a 	beq.w	80014a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8094 	beq.w	80014a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x2c0>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001380:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x2c0>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6613      	str	r3, [r2, #96]	; 0x60
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x2c0>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001394:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <HAL_GPIO_Init+0x2c4>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013be:	d00d      	beq.n	80013dc <HAL_GPIO_Init+0x1d4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <HAL_GPIO_Init+0x2c8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x1d0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a42      	ldr	r2, [pc, #264]	; (80014d4 <HAL_GPIO_Init+0x2cc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_Init+0x1cc>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e004      	b.n	80013de <HAL_GPIO_Init+0x1d6>
 80013d4:	2307      	movs	r3, #7
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x1d6>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_GPIO_Init+0x1d6>
 80013dc:	2300      	movs	r3, #0
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ee:	4937      	ldr	r1, [pc, #220]	; (80014cc <HAL_GPIO_Init+0x2c4>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001420:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f aeaf 	bne.w	8001218 <HAL_GPIO_Init+0x10>
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	48000800 	.word	0x48000800
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43d9      	mvns	r1, r3
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	400b      	ands	r3, r1
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9b6 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40007000 	.word	0x40007000

080015dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ea:	d130      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f8:	d038      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2232      	movs	r2, #50	; 0x32
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	e002      	b.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b01      	subs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001634:	d102      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f2      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001648:	d110      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e00f      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d007      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83

08001688 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f000 bc02 	b.w	8001ea0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a6:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80e4 	beq.w	8001886 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4c>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	f040 808b 	bne.w	80017e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 8087 	bne.w	80017e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x64>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e3d9      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_RCC_OscConfig+0x7e>
 80016fc:	4b7e      	ldr	r3, [pc, #504]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001704:	e005      	b.n	8001712 <HAL_RCC_OscConfig+0x8a>
 8001706:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001712:	4293      	cmp	r3, r2
 8001714:	d223      	bcs.n	800175e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fd8c 	bl	8002238 <RCC_SetFlashLatencyFromMSIRange>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e3ba      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a72      	ldr	r2, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	496d      	ldr	r1, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001748:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	4968      	ldr	r1, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e025      	b.n	80017aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a65      	ldr	r2, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4960      	ldr	r1, [pc, #384]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177c:	4b5e      	ldr	r3, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	495b      	ldr	r1, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fd4c 	bl	8002238 <RCC_SetFlashLatencyFromMSIRange>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e37a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017aa:	f000 fc81 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4950      	ldr	r1, [pc, #320]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <HAL_RCC_OscConfig+0x278>)
 80017c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ca:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_RCC_OscConfig+0x27c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fb42 	bl	8000e58 <HAL_InitTick>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d052      	beq.n	8001884 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	e35e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d032      	beq.n	8001850 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb7f 	bl	8000ef8 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fe:	f7ff fb7b 	bl	8000ef8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e347      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a35      	ldr	r2, [pc, #212]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4930      	ldr	r1, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	492b      	ldr	r1, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
 800184e:	e01a      	b.n	8001886 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185c:	f7ff fb4c 	bl	8000ef8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001864:	f7ff fb48 	bl	8000ef8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e314      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1dc>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d073      	beq.n	800197a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x21c>
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d10e      	bne.n	80018bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d063      	beq.n	8001978 <HAL_RCC_OscConfig+0x2f0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d15f      	bne.n	8001978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e2f1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x24c>
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e025      	b.n	8001920 <HAL_RCC_OscConfig+0x298>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d114      	bne.n	8001908 <HAL_RCC_OscConfig+0x280>
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x298>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08003e20 	.word	0x08003e20
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004
 8001908:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a9f      	ldr	r2, [pc, #636]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fae6 	bl	8000ef8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fae2 	bl	8000ef8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e2ae      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x2a8>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fad2 	bl	8000ef8 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff face 	bl	8000ef8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e29a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x2d0>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d060      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x310>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d116      	bne.n	80019c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x328>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e277      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	4973      	ldr	r1, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c4:	e040      	b.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d023      	beq.n	8001a16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ce:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff fa8d 	bl	8000ef8 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fa89 	bl	8000ef8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e255      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	495f      	ldr	r1, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa69 	bl	8000ef8 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa65 	bl	8000ef8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e231      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d03c      	beq.n	8001ace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	4a4a      	ldr	r2, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fa44 	bl	8000ef8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fa40 	bl	8000ef8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e20c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ef      	beq.n	8001a74 <HAL_RCC_OscConfig+0x3ec>
 8001a94:	e01b      	b.n	8001ace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fa27 	bl	8000ef8 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff fa23 	bl	8000ef8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1ef      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a6 	beq.w	8001c28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d118      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b20:	f7ff f9ea 	bl	8000ef8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b28:	f7ff f9e6 	bl	8000ef8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1b2      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4d8>
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5e:	e029      	b.n	8001bb4 <HAL_RCC_OscConfig+0x52c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d115      	bne.n	8001b94 <HAL_RCC_OscConfig+0x50c>
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_OscConfig+0x52c>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40007000 	.word	0x40007000
 8001b94:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a99      	ldr	r2, [pc, #612]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba4:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a95      	ldr	r2, [pc, #596]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f99c 	bl	8000ef8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f998 	bl	8000ef8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e162      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ed      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x53c>
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f985 	bl	8000ef8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f981 	bl	8000ef8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e14b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c08:	4b7d      	ldr	r3, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ed      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d03c      	beq.n	8001cae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c3c:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f954 	bl	8000ef8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c54:	f7ff f950 	bl	8000ef8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e11c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ef      	beq.n	8001c54 <HAL_RCC_OscConfig+0x5cc>
 8001c74:	e01b      	b.n	8001cae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7c:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff f937 	bl	8000ef8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8e:	f7ff f933 	bl	8000ef8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0ff      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ef      	bne.n	8001c8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80f3 	beq.w	8001e9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	f040 80c9 	bne.w	8001e54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d12c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d123      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d11b      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d113      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d109      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	085b      	lsrs	r3, r3, #1
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d06b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d062      	beq.n	8001dfc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0ac      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d52:	f7ff f8d1 	bl	8000ef8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff f8cd 	bl	8000ef8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e099      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x77c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d92:	0212      	lsls	r2, r2, #8
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d9a:	0852      	lsrs	r2, r2, #1
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	0552      	lsls	r2, r2, #21
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001da6:	0852      	lsrs	r2, r2, #1
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0652      	lsls	r2, r2, #25
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db2:	06d2      	lsls	r2, r2, #27
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4912      	ldr	r1, [pc, #72]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd4:	f7ff f890 	bl	8000ef8 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f88c 	bl	8000ef8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e058      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_RCC_OscConfig+0x778>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfa:	e050      	b.n	8001e9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e04f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d144      	bne.n	8001e9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e2c:	f7ff f864 	bl	8000ef8 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f860 	bl	8000ef8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e02c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x7ac>
 8001e52:	e024      	b.n	8001e9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d01f      	beq.n	8001e9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff f847 	bl	8000ef8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f843 	bl	8000ef8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4905      	ldr	r1, [pc, #20]	; (8001ea8 <HAL_RCC_OscConfig+0x820>)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x824>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	e001      	b.n	8001e9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	feeefffc 	.word	0xfeeefffc

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0e7      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b72      	ldr	r3, [pc, #456]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4970      	ldr	r1, [pc, #448]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b6e      	ldr	r3, [pc, #440]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0cf      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d908      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4960      	ldr	r1, [pc, #384]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04c      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d121      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0a6      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f66:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08e      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e086      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4943      	ldr	r1, [pc, #268]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f98:	f7fe ffae 	bl	8000ef8 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe ffaa 	bl	8000ef8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e06e      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	492b      	ldr	r1, [pc, #172]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d210      	bcs.n	8002026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4923      	ldr	r1, [pc, #140]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e036      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4918      	ldr	r1, [pc, #96]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4910      	ldr	r1, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002064:	f000 f824 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	490b      	ldr	r1, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1fc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fee5 	bl	8000e58 <HAL_InitTick>
 800208e:	4603      	mov	r3, r0
 8002090:	72fb      	strb	r3, [r7, #11]

  return status;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003e20 	.word	0x08003e20
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x34>
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d121      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d11e      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e005      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d102      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e004      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d101      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d134      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0xa6>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0xac>
 8002154:	e005      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	617b      	str	r3, [r7, #20]
      break;
 8002160:	e002      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	3301      	adds	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0e5b      	lsrs	r3, r3, #25
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	3301      	adds	r3, #1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	08003e38 	.word	0x08003e38
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4904      	ldr	r1, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08003e30 	.word	0x08003e30

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002210:	f7ff ffda 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4904      	ldr	r1, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08003e30 	.word	0x08003e30

08002238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002244:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002250:	f7ff f9b6 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 8002254:	6178      	str	r0, [r7, #20]
 8002256:	e014      	b.n	8002282 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	; 0x58
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002270:	f7ff f9a6 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 8002274:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002288:	d10b      	bne.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d919      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2ba0      	cmp	r3, #160	; 0xa0
 8002294:	d902      	bls.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002296:	2302      	movs	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	e013      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800229c:	2301      	movs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e010      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d902      	bls.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022a8:	2303      	movs	r3, #3
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e00a      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d102      	bne.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b4:	2302      	movs	r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e004      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d101      	bne.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022000 	.word	0x40022000

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002300:	2300      	movs	r3, #0
 8002302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002304:	2300      	movs	r3, #0
 8002306:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002310:	2b00      	cmp	r3, #0
 8002312:	d031      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800231c:	d01a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800231e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002322:	d814      	bhi.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800232c:	d10f      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233a:	e00c      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f9de 	bl	8002704 <RCCEx_PLLSAI1_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234c:	e003      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	74fb      	strb	r3, [r7, #19]
      break;
 8002352:	e000      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	494e      	ldr	r1, [pc, #312]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002372:	e001      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 809e 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
 80023ac:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fd96 	bl	8000ef8 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fd92 	bl	8000ef8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	74fb      	strb	r3, [r7, #19]
        break;
 80023e2:	e005      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ef      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d15a      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01e      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	d019      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fd52 	bl	8000ef8 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002456:	e00b      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe fd4e 	bl	8000ef8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d902      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	74fb      	strb	r3, [r7, #19]
            break;
 800246e:	e006      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ec      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800249a:	e009      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	74bb      	strb	r3, [r7, #18]
 80024a0:	e006      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b0:	7c7b      	ldrb	r3, [r7, #17]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b8a      	ldr	r3, [pc, #552]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	4a89      	ldr	r2, [pc, #548]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ce:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 0203 	bic.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4980      	ldr	r1, [pc, #512]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f0:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 020c 	bic.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	4978      	ldr	r1, [pc, #480]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	496f      	ldr	r1, [pc, #444]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	4967      	ldr	r1, [pc, #412]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002556:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	495e      	ldr	r1, [pc, #376]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	4956      	ldr	r1, [pc, #344]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d028      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4945      	ldr	r1, [pc, #276]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025da:	d106      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a3f      	ldr	r2, [pc, #252]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	e011      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f2:	d10c      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f882 	bl	8002704 <RCCEx_PLLSAI1_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d028      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	492d      	ldr	r1, [pc, #180]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002638:	d106      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a28      	ldr	r2, [pc, #160]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002644:	60d3      	str	r3, [r2, #12]
 8002646:	e011      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f853 	bl	8002704 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01c      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002696:	d10c      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f830 	bl	8002704 <RCCEx_PLLSAI1_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4904      	ldr	r1, [pc, #16]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	4b74      	ldr	r3, [pc, #464]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800271e:	4b71      	ldr	r3, [pc, #452]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
       ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002736:	4b6b      	ldr	r3, [pc, #428]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
       ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d047      	beq.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e044      	b.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d018      	beq.n	800278a <RCCEx_PLLSAI1_Config+0x86>
 8002758:	2b03      	cmp	r3, #3
 800275a:	d825      	bhi.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <RCCEx_PLLSAI1_Config+0x62>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d009      	beq.n	8002778 <RCCEx_PLLSAI1_Config+0x74>
 8002764:	e020      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11d      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002776:	e01a      	b.n	80027ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002778:	4b5a      	ldr	r3, [pc, #360]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e013      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800278a:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002796:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a6:	e006      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e004      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027be:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	430b      	orrs	r3, r1
 80027d4:	4943      	ldr	r1, [pc, #268]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d17c      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fb84 	bl	8000ef8 <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027f2:	e009      	b.n	8002808 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f4:	f7fe fb80 	bl	8000ef8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	73fb      	strb	r3, [r7, #15]
        break;
 8002806:	e005      	b.n	8002814 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ef      	bne.n	80027f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d15f      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d110      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002828:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	06d2      	lsls	r2, r2, #27
 8002838:	430a      	orrs	r2, r1
 800283a:	492a      	ldr	r1, [pc, #168]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	610b      	str	r3, [r1, #16]
 8002840:	e027      	b.n	8002892 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d112      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	0211      	lsls	r1, r2, #8
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6912      	ldr	r2, [r2, #16]
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0552      	lsls	r2, r2, #21
 8002864:	430a      	orrs	r2, r1
 8002866:	491f      	ldr	r1, [pc, #124]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	610b      	str	r3, [r1, #16]
 800286c:	e011      	b.n	8002892 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002876:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	0211      	lsls	r1, r2, #8
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6952      	ldr	r2, [r2, #20]
 8002884:	0852      	lsrs	r2, r2, #1
 8002886:	3a01      	subs	r2, #1
 8002888:	0652      	lsls	r2, r2, #25
 800288a:	430a      	orrs	r2, r1
 800288c:	4915      	ldr	r1, [pc, #84]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800289c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe fb2b 	bl	8000ef8 <HAL_GetTick>
 80028a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a4:	e009      	b.n	80028ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a6:	f7fe fb27 	bl	8000ef8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d902      	bls.n	80028ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	73fb      	strb	r3, [r7, #15]
          break;
 80028b8:	e005      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ef      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e049      	b.n	800298e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f8a6 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 faac 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e03b      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x4e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d004      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x4e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_TIM_Base_Start_IT+0xa0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d115      	bne.n	8002a12 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_TIM_Base_Start_IT+0xa4>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d015      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x8c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d011      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	e008      	b.n	8002a24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e000      	b.n	8002a26 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	00010007 	.word	0x00010007

08002a40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <HAL_TIM_Base_Stop_IT+0x48>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	f240 4344 	movw	r3, #1092	; 0x444
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_Base_Stop_IT+0x48>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01b      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0202 	mvn.w	r2, #2
 8002ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9ad 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002aee:	e005      	b.n	8002afc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f99f 	bl	8002e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9b0 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01b      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0204 	mvn.w	r2, #4
 8002b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f987 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e005      	b.n	8002b48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f979 	bl	8002e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f98a 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01b      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0208 	mvn.w	r2, #8
 8002b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f961 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002b86:	e005      	b.n	8002b94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f953 	bl	8002e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f964 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01b      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0210 	mvn.w	r2, #16
 8002bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2208      	movs	r2, #8
 8002bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f93b 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002bd2:	e005      	b.n	8002be0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f92d 	bl	8002e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f93e 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f06f 0201 	mvn.w	r2, #1
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fe f8a9 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fa99 	bl	8003160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa91 	bl	8003174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00c      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f8fd 	bl	8002e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0220 	mvn.w	r2, #32
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fa59 	bl	800314c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_ConfigClockSource+0x1c>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0b6      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x18a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfa:	d03e      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xd8>
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	f200 8087 	bhi.w	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	f000 8086 	beq.w	8002e18 <HAL_TIM_ConfigClockSource+0x176>
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d87f      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d12:	2b70      	cmp	r3, #112	; 0x70
 8002d14:	d01a      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xaa>
 8002d16:	2b70      	cmp	r3, #112	; 0x70
 8002d18:	d87b      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d1a:	2b60      	cmp	r3, #96	; 0x60
 8002d1c:	d050      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0x11e>
 8002d1e:	2b60      	cmp	r3, #96	; 0x60
 8002d20:	d877      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d22:	2b50      	cmp	r3, #80	; 0x50
 8002d24:	d03c      	beq.n	8002da0 <HAL_TIM_ConfigClockSource+0xfe>
 8002d26:	2b50      	cmp	r3, #80	; 0x50
 8002d28:	d873      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d058      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0x13e>
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d86f      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d32:	2b30      	cmp	r3, #48	; 0x30
 8002d34:	d064      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15e>
 8002d36:	2b30      	cmp	r3, #48	; 0x30
 8002d38:	d86b      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d060      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15e>
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d867      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05c      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15e>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d05a      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15e>
 8002d4a:	e062      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	f000 f970 	bl	8003040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
      break;
 8002d78:	e04f      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	f000 f959 	bl	8003040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9c:	609a      	str	r2, [r3, #8]
      break;
 8002d9e:	e03c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dac:	461a      	mov	r2, r3
 8002dae:	f000 f8cd 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2150      	movs	r1, #80	; 0x50
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f926 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002dbe:	e02c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f8ec 	bl	8002faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2160      	movs	r1, #96	; 0x60
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f916 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002dde:	e01c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dec:	461a      	mov	r2, r3
 8002dee:	f000 f8ad 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f906 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 f8fd 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002e18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a2a      	ldr	r2, [pc, #168]	; (8002f40 <TIM_Base_SetConfig+0xbc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_Base_SetConfig+0x20>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d108      	bne.n	8002eb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <TIM_Base_SetConfig+0xbc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00b      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d007      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <TIM_Base_SetConfig+0xbc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <TIM_Base_SetConfig+0xa0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_Base_SetConfig+0xa0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40014400 	.word	0x40014400

08002f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 030a 	bic.w	r3, r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 0210 	bic.w	r2, r3, #16
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	031b      	lsls	r3, r3, #12
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	f043 0307 	orr.w	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	021a      	lsls	r2, r3, #8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	431a      	orrs	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003094:	2302      	movs	r3, #2
 8003096:	e04f      	b.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d004      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40014000 	.word	0x40014000

0800314c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e040      	b.n	800321c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fcac 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fb46 	bl	8003860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f917 	bl	8003408 <UART_SetConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e01b      	b.n	800321c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fbc5 	bl	80039a4 <UART_CheckIdleState>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003238:	2b20      	cmp	r3, #32
 800323a:	d178      	bne.n	800332e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Transmit+0x24>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e071      	b.n	8003330 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325a:	f7fd fe4d 	bl	8000ef8 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003278:	d108      	bne.n	800328c <HAL_UART_Transmit+0x68>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	e003      	b.n	8003294 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003294:	e030      	b.n	80032f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc27 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e03c      	b.n	8003330 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c8:	b292      	uxth	r2, r2
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	3302      	adds	r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	e008      	b.n	80032e6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b292      	uxth	r2, r2
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1c8      	bne.n	8003296 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fbf0 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e005      	b.n	8003330 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	; 0x38
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	61fb      	str	r3, [r7, #28]
   return(result);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003360:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1e6      	bne.n	8003340 <HAL_UART_AbortTransmit+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d137      	bne.n	80033f0 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a0:	61ba      	str	r2, [r7, #24]
 80033a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6979      	ldr	r1, [r7, #20]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	613b      	str	r3, [r7, #16]
   return(result);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d019      	beq.n	80033f0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	2200      	movs	r2, #0
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fed2 	bl	8001172 <HAL_DMA_Abort>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd ff08 	bl	80011ee <HAL_DMA_GetError>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d105      	bne.n	80033f0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2210      	movs	r2, #16
 80033e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e007      	b.n	8003400 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3738      	adds	r7, #56	; 0x38
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b08a      	sub	sp, #40	; 0x28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4313      	orrs	r3, r2
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4bb4      	ldr	r3, [pc, #720]	; (8003708 <UART_SetConfig+0x300>)
 8003438:	4013      	ands	r3, r2
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	430b      	orrs	r3, r1
 8003442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4aa9      	ldr	r2, [pc, #676]	; (800370c <UART_SetConfig+0x304>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	4313      	orrs	r3, r2
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4aa0      	ldr	r2, [pc, #640]	; (8003710 <UART_SetConfig+0x308>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d126      	bne.n	80034e0 <UART_SetConfig+0xd8>
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <UART_SetConfig+0x30c>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d81b      	bhi.n	80034d8 <UART_SetConfig+0xd0>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0xa0>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034c9 	.word	0x080034c9
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034be:	e080      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80034c0:	2302      	movs	r3, #2
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c6:	e07c      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80034c8:	2304      	movs	r3, #4
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ce:	e078      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80034d0:	2308      	movs	r3, #8
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d6:	e074      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80034d8:	2310      	movs	r3, #16
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e070      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a8c      	ldr	r2, [pc, #560]	; (8003718 <UART_SetConfig+0x310>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d138      	bne.n	800355c <UART_SetConfig+0x154>
 80034ea:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <UART_SetConfig+0x30c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d82d      	bhi.n	8003554 <UART_SetConfig+0x14c>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0xf8>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003535 	.word	0x08003535
 8003504:	08003555 	.word	0x08003555
 8003508:	08003555 	.word	0x08003555
 800350c:	08003555 	.word	0x08003555
 8003510:	08003545 	.word	0x08003545
 8003514:	08003555 	.word	0x08003555
 8003518:	08003555 	.word	0x08003555
 800351c:	08003555 	.word	0x08003555
 8003520:	0800353d 	.word	0x0800353d
 8003524:	08003555 	.word	0x08003555
 8003528:	08003555 	.word	0x08003555
 800352c:	08003555 	.word	0x08003555
 8003530:	0800354d 	.word	0x0800354d
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e042      	b.n	80035c2 <UART_SetConfig+0x1ba>
 800353c:	2302      	movs	r3, #2
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e03e      	b.n	80035c2 <UART_SetConfig+0x1ba>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e03a      	b.n	80035c2 <UART_SetConfig+0x1ba>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e036      	b.n	80035c2 <UART_SetConfig+0x1ba>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355a:	e032      	b.n	80035c2 <UART_SetConfig+0x1ba>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6a      	ldr	r2, [pc, #424]	; (800370c <UART_SetConfig+0x304>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12a      	bne.n	80035bc <UART_SetConfig+0x1b4>
 8003566:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <UART_SetConfig+0x30c>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003574:	d01a      	beq.n	80035ac <UART_SetConfig+0x1a4>
 8003576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357a:	d81b      	bhi.n	80035b4 <UART_SetConfig+0x1ac>
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d00c      	beq.n	800359c <UART_SetConfig+0x194>
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d815      	bhi.n	80035b4 <UART_SetConfig+0x1ac>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <UART_SetConfig+0x18c>
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0x19c>
 8003592:	e00f      	b.n	80035b4 <UART_SetConfig+0x1ac>
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e012      	b.n	80035c2 <UART_SetConfig+0x1ba>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e00e      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e00a      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e006      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e002      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a51      	ldr	r2, [pc, #324]	; (800370c <UART_SetConfig+0x304>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d17a      	bne.n	80036c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d824      	bhi.n	800361e <UART_SetConfig+0x216>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x1d4>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003601 	.word	0x08003601
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	08003609 	.word	0x08003609
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800360f 	.word	0x0800360f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	0800361f 	.word	0x0800361f
 80035f8:	0800361f 	.word	0x0800361f
 80035fc:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fdee 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003604:	61f8      	str	r0, [r7, #28]
        break;
 8003606:	e010      	b.n	800362a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b44      	ldr	r3, [pc, #272]	; (800371c <UART_SetConfig+0x314>)
 800360a:	61fb      	str	r3, [r7, #28]
        break;
 800360c:	e00d      	b.n	800362a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7fe fd4f 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8003612:	61f8      	str	r0, [r7, #28]
        break;
 8003614:	e009      	b.n	800362a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	61fb      	str	r3, [r7, #28]
        break;
 800361c:	e005      	b.n	800362a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8107 	beq.w	8003840 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	429a      	cmp	r2, r3
 8003640:	d305      	bcc.n	800364e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	429a      	cmp	r2, r3
 800364c:	d903      	bls.n	8003656 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003654:	e0f4      	b.n	8003840 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2200      	movs	r2, #0
 800365a:	461c      	mov	r4, r3
 800365c:	4615      	mov	r5, r2
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	022b      	lsls	r3, r5, #8
 8003668:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800366c:	0222      	lsls	r2, r4, #8
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	6849      	ldr	r1, [r1, #4]
 8003672:	0849      	lsrs	r1, r1, #1
 8003674:	2000      	movs	r0, #0
 8003676:	4688      	mov	r8, r1
 8003678:	4681      	mov	r9, r0
 800367a:	eb12 0a08 	adds.w	sl, r2, r8
 800367e:	eb43 0b09 	adc.w	fp, r3, r9
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003690:	4650      	mov	r0, sl
 8003692:	4659      	mov	r1, fp
 8003694:	f7fc fda2 	bl	80001dc <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a6:	d308      	bcc.n	80036ba <UART_SetConfig+0x2b2>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d204      	bcs.n	80036ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e0c2      	b.n	8003840 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036c0:	e0be      	b.n	8003840 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ca:	d16a      	bne.n	80037a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80036cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d834      	bhi.n	800373e <UART_SetConfig+0x336>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <UART_SetConfig+0x2d4>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003701 	.word	0x08003701
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003729 	.word	0x08003729
 80036e8:	0800373f 	.word	0x0800373f
 80036ec:	0800372f 	.word	0x0800372f
 80036f0:	0800373f 	.word	0x0800373f
 80036f4:	0800373f 	.word	0x0800373f
 80036f8:	0800373f 	.word	0x0800373f
 80036fc:	08003737 	.word	0x08003737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003700:	f7fe fd6e 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003704:	61f8      	str	r0, [r7, #28]
        break;
 8003706:	e020      	b.n	800374a <UART_SetConfig+0x342>
 8003708:	efff69f3 	.word	0xefff69f3
 800370c:	40008000 	.word	0x40008000
 8003710:	40013800 	.word	0x40013800
 8003714:	40021000 	.word	0x40021000
 8003718:	40004400 	.word	0x40004400
 800371c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe fd74 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003724:	61f8      	str	r0, [r7, #28]
        break;
 8003726:	e010      	b.n	800374a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003728:	4b4c      	ldr	r3, [pc, #304]	; (800385c <UART_SetConfig+0x454>)
 800372a:	61fb      	str	r3, [r7, #28]
        break;
 800372c:	e00d      	b.n	800374a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372e:	f7fe fcbf 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8003732:	61f8      	str	r0, [r7, #28]
        break;
 8003734:	e009      	b.n	800374a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373a:	61fb      	str	r3, [r7, #28]
        break;
 800373c:	e005      	b.n	800374a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d077      	beq.n	8003840 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005a      	lsls	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	441a      	add	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d916      	bls.n	800379a <UART_SetConfig+0x392>
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d212      	bcs.n	800379a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f023 030f 	bic.w	r3, r3, #15
 800377c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	b29a      	uxth	r2, r3
 800378a:	8afb      	ldrh	r3, [r7, #22]
 800378c:	4313      	orrs	r3, r2
 800378e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	8afa      	ldrh	r2, [r7, #22]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e052      	b.n	8003840 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037a0:	e04e      	b.n	8003840 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d827      	bhi.n	80037fa <UART_SetConfig+0x3f2>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0x3a8>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	080037fb 	.word	0x080037fb
 80037c8:	080037fb 	.word	0x080037fb
 80037cc:	080037fb 	.word	0x080037fb
 80037d0:	080037f3 	.word	0x080037f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d4:	f7fe fd04 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 80037d8:	61f8      	str	r0, [r7, #28]
        break;
 80037da:	e014      	b.n	8003806 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe fd16 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 80037e0:	61f8      	str	r0, [r7, #28]
        break;
 80037e2:	e010      	b.n	8003806 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <UART_SetConfig+0x454>)
 80037e6:	61fb      	str	r3, [r7, #28]
        break;
 80037e8:	e00d      	b.n	8003806 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ea:	f7fe fc61 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 80037ee:	61f8      	str	r0, [r7, #28]
        break;
 80037f0:	e009      	b.n	8003806 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	61fb      	str	r3, [r7, #28]
        break;
 80037f8:	e005      	b.n	8003806 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003804:	bf00      	nop
    }

    if (pclk != 0U)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d019      	beq.n	8003840 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	085a      	lsrs	r2, r3, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	441a      	add	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	d909      	bls.n	800383a <UART_SetConfig+0x432>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d205      	bcs.n	800383a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e002      	b.n	8003840 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800384c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	00f42400 	.word	0x00f42400

08003860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01a      	beq.n	8003976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395e:	d10a      	bne.n	8003976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b098      	sub	sp, #96	; 0x60
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039b4:	f7fd faa0 	bl	8000ef8 <HAL_GetTick>
 80039b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d12e      	bne.n	8003a26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f88c 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d021      	beq.n	8003a26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	647b      	str	r3, [r7, #68]	; 0x44
 8003a02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e062      	b.n	8003aec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d149      	bne.n	8003ac8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f856 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03c      	beq.n	8003ac8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e6      	bne.n	8003a4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	617b      	str	r3, [r7, #20]
   return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e011      	b.n	8003aec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3758      	adds	r7, #88	; 0x58
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b04:	e049      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d045      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fd f9f3 	bl	8000ef8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e048      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d031      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d110      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f838 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e029      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b74:	d111      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f81e 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e00f      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0a6      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	; 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d118      	bne.n	8003c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c7e:	bf00      	nop
 8003c80:	3754      	adds	r7, #84	; 0x54
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <memset>:
 8003c8a:	4402      	add	r2, r0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d100      	bne.n	8003c94 <memset+0xa>
 8003c92:	4770      	bx	lr
 8003c94:	f803 1b01 	strb.w	r1, [r3], #1
 8003c98:	e7f9      	b.n	8003c8e <memset+0x4>
	...

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 f818 	bl	8003ce4 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08003e70 	.word	0x08003e70
 8003cd8:	08003e70 	.word	0x08003e70
 8003cdc:	08003e70 	.word	0x08003e70
 8003ce0:	08003e74 	.word	0x08003e74

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
